<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- $Id$ -->
<muclient>
<plugin
   name="xBroadcast_CP"
   author="Bast"
   id="aaa66f81c50828bbbfda7100"
   language="Lua"
   purpose="Broadcasts when anything happens related to a cp"
   save_state="y"
   date_written="2009-02-18 12:31:01"
   requires="4.38"
   version="1.0"
   >

<description trim="y">
<![CDATA[
[FOR PLUGIN AUTHORS ONLY]

Broadcasts when anything happens in a campaign
Broadcasts
   1 - Mob list, get var.mobs and unserialize it
       mobs = { 1 = {name = 'Some name', room = 'Some room', clean = 'A name with some stuff removed'},
              2 = {name = 'Another name', room = 'Another room', clean = 'Another name with some stuff removed'}, }
       It will be resent when a mob is killed and will be nil when a cp is not active        
   2 - timer, will be updated every 60 seconds, get var.timer and unserialize it
        timer = {secs = num, text = 'time in text format', days = days, hours = hours, mins = minutes}
   3 - rewards, get var.rewards and unserialize it, this can also be used to check when a cp is finished
       reqards = { trivia = num, training = num, gold = num, practice = num, quest = num}

Example
  function OnPluginBroadcast (msg, id, name, text)
    if id == "aaa66f81c50828bbbfda7100" and msg == 1 then
      local pvar = GetPluginVariable(  "aaa66f81c50828bbbfda7100", mobs )

      -- get the mobs
      loadstring( pvar )()
      cp_mobs = mobs
    end
  end

]]>
</description>

</plugin>

<!--  Get our standard constants -->

<include name="constants.lua"/>

<triggers>
  <trigger
   enabled="y"
   match="Welcome to Aardwolf. May your adventures be mystical, challenging and rewarding."
   sequence="100"
   send_to="10"   
  >
  <send>
cp check
  </send>
  </trigger>
  
  <trigger
   enabled="y"
   match="############# Reconnecting to Game #############"
   sequence="100"
   send_to="10"   
  >
  <send>
cp check
  </send>
  </trigger>
  
  <trigger
   enabled="n"
   match="You are not currently on a campaign."
   name="cp_none"
   script="cp_none"
   sequence="100"
   group="campaigncheck"
  >
  </trigger>
  <trigger
   enabled="n"  
   match="You have * to finish this campaign."
   name="cp_time"
   script="cp_time"
   sequence="100"
   group="campaigncheck"
   omit_from_output="y"   
  >
  </trigger>
  <trigger
   enabled="n"  
   match="^You still have to kill \* (?<name>.*) \((?<room>.*)\)\.*$"
   name="campaign_item"
   script="campaign_item"
   sequence="100"
   regexp="y"
   group="campaigncheck"
   omit_from_output="y"   
  >
  </trigger>
  
 <trigger
   enabled="n"
   match="Congratulations, that was one of your CAMPAIGN mobs!"
   send_to="10"
   sequence="100"
   script="cp_mob_dead"
   group="campaignin"
  >
  </trigger>

 <trigger
   enabled="n"
   match="CONGRATULATIONS! You have completed your campaign."
   sequence="100"
   script="campaign_complete"
   group="campaignin"
  >
  </trigger>

  <trigger
   enabled="n"
   match="^(\s*)Reward of (?<amount>\d+) (?<type>.+) (.+) added.$"
   sequence="100"
   script="campaign_reward"
   group="campaignrew"
   regexp="y"   
  >
  </trigger>
  
 <trigger
   enabled="n"
   match="--------------------------------------------------------------"
   sequence="100"
   script="campaign_done"
   group="campaigndone"
  >
  </trigger>
</triggers>


<!--  Aliases  -->

<aliases>
  <alias
   name="cp_check"
   script="cp_check"
   match="^(cp|campaign) check$"
   enabled="y"
   regexp="y"
   sequence="100"
  >
  <send>cp check</send>
  </alias>
 
</aliases>


<!--  Timers  -->

<timers>
  <timer 
      script="update_timer" 
      enabled="n" 
      second="59.00" 
      name="cp_timer"
      >
  </timer>
</timers>


<!--  Script  -->

<script>
<![CDATA[
require "var"
require "pluginhelper"
require "serialize"
require "commas"
require "verify"

mobs = {}
rewards = {}
timer = {}
enemy = ""

function cleanname(name)
  return string.lower(string.gsub(name, ",", ""))
end

function campaign_item (name, line, wildcards)
  name = wildcards.name
  room = wildcards.room
  if not name or not room then
    print("error parsing line: ", line)
    tprint(wildcards)
  else
    table.insert(mobs, {name=name, room=room, clean=cleanname(name)})
  end
end -- campaign_item

function cp_mob_dead (name, line, wildcards)
  local tenemy = enemy
  local found = false
  for i,v in ipairs(mobs) do
    if v.clean == string.lower(tenemy) then
      table.remove(mobs, i)
      found = true
      break
    end   
  end
  if found then
    var.mobs = serialize.save( "mobs", mobs )  
    broadcast(1, var.mobs)
  else
    print("CP: could not find mob", enemy)
    Execute("cp check")
  end
end

function cp_time (name, line, wildcards)
  local text = wildcards [1]
    
  -- work out when campaign ends
  
  when_required = os.time ()
  
  local days = string.match (text, "(%d+) days?")
  if days then
    when_required = when_required + tonumber (days) * 60 * 60 * 24
  end -- some days left
  
  local hours = string.match (text, "(%d+) hours?")  
  if hours then
    when_required = when_required + tonumber (hours) * 60 * 60
  end -- some days left

  local minutes = string.match (text, "(%d+) minutes?")  
  if minutes then
    when_required = when_required + tonumber (minutes) * 60
  end -- some days left
  
  enabletriggroup("campaigncheck", false)
  enabletriggroup("campaignin", true)  
  
  var.mobs = serialize.save( "mobs", mobs ) 
  broadcast(1, var.mobs) 
  update_timer()
  check(EnableTimer("cp_timer", true))  	

end -- cp_time

function campaign_done (name, line, wildcards)
  var.rewards = serialize.save( "rewards", rewards ) 
  broadcast(3, var.rewards)
  cp_none() 
end -- campaign_done

function campaign_reward (name, line, wildcards)
  local type = wildcards.type
  local amount = wildcards.amount
  rewards[type] = amount
  enabletriggroup("campaigndone", true)
end

function campaign_complete(name, line, wildcards)
  enabletriggroup("campaignrew", true)
end

function update_timer()
  -- how long to go
  local time_to_go = when_required - os.time ()
  timer['secs'] = time_to_go
  timer['text'] = convert_time(time_to_go)
  local days, hours, mins = SecondsToDHM(time_to_go)
  timer['days'] = days
  timer['hours'] = hours
  timer['mins'] = mins
  var.timer = serialize.save( "timer", timer )
  broadcast(2, var.timer)
end

function cp_check( name, line, wildcards)
  enabletriggroup("campaigncheck", true)

  mobs = {}
  rewards = {}
  timer = {}  
end -- cp_check

function cp_none( name, line, wildcards)
  enabletriggroup("campaigncheck", false)
  enabletriggroup("campaignin", false)
  enabletriggroup("campaignrew", false)
  enabletriggroup("campaigndone", false)
  check(EnableTimer("cp_timer", false))    
  mobs = {}  
  rewards = {}
  timer = {}  
end

function OnPluginBroadcast (msg, id, name, text)
  if msg == 1 and id == "8a710e0783b431c06d61a54c" then
  
    -- get one variable
    enemy = GetPluginVariable ("8a710e0783b431c06d61a54c", "enemy")
     
  end -- stats changed
end

function SecondsToDHM(sSeconds)
  local nSeconds = tonumber(sSeconds)
  if nSeconds == 0 then
    --return nil
    return "00:00:00"
  else
    nDays = math.floor(nSeconds/(3600 * 24))
    nHours = math.floor(nSeconds/3600 - (nDays * 24))
    nMins = math.floor(nSeconds/60 - (nHours * 60) - (nDays * 24 * 60))
    return nDays, nHours, nMins
  end
end

function OnPluginEnable ()
  -- check for stats detector
  checkplugin ("8a710e0783b431c06d61a54c", "Stats_Detector.xml")
end

function OnPluginDisable ()
  BroadcastPlugin(-1)
end


function OnPluginSaveState ()
  SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))
  plugin_save_vars(options_table)  
end -- function OnPluginSaveState

function OnPluginInstall ()

 if GetVariable ("enabled") == "false" then
    ColourNote ("yellow", "", "Warning: Plugin " .. GetPluginName ().. " is currently disabled.")
    check (EnablePlugin(GetPluginID (), false))
    return
  end -- they didn't enable us last time
  
end -- OnPluginInstall
]]>
</script>

<!--  Aliases  -->

<aliases>
  <alias
   name="plugin_parse"
   script="plugin_parse"
   match="nothing"
   enabled="y"
   regexp="y"
   ignore_case="y"
   sequence="110"
   expand_variables="y"
  >
  </alias>   
</aliases>

<script>
<![CDATA[

options_table  = {
  tdebug = {help="set this for debugging information", type="bool", default=verify_bool(false)},
  plugin_colour = {help="set the plugin colour", type="colour", default=verify_colour("orange")},
  cmd = {help="the command for this plugin", type="string", after=set_plugin_alias, default="bcp"},
}

cmds_table = {

}
  
function plugin_parse (name, line, wildcards)
  plugin_parse_helper(name, line, wildcards, cmds_table, options_table)
end -- plugin_parse

init_plugin_vars(options_table)
set_plugin_alias()
]]>
</script>

</muclient>

