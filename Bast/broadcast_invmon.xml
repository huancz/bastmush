<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- $Id$ -->
<muclient>
<plugin
   name="xBroadcast_Inventory"
   author="Bast"
   id="aaa7dc9ed92ffc6146964abc"
   language="Lua"
   purpose="broadcast inventory"
   save_state="y"
   date_written="2009-02-22 14:20:07"
   requires="4.73"
   version="6.1"
   >

<description trim="y">
<![CDATA[
[FOR PLUGIN AUTHORS ONLY]

Broadcasts when items are worn or removed through invmon
Broadcasts
   1 - eq removed, item is passed as text
       item = { sn = objectid, place = place}
   2 - eq worn, item is passed as text
       item = { sn = objectid, place = place}

Example
  function OnPluginBroadcast (msg, id, name, text)
    if id == "aaa7dc9ed92ffc6146964abc" and msg == 1 then
      -- eq removed
      loadstring( text )()
      eqinfo = item
    end
  end

You remove Aardwolf Ring of Regeneration from your left finger.
xBroadcast_Invmon : Broadcast 1
item = {}
  item.objectid = "6285182"
  item.place = "lfinger"
  item.name = "Aardwolf Ring of Regeneration"
  item.container = "-1"

You wear Four Winds on your left finger.
xBroadcast_Invmon : Broadcast 2
item = {}
  item.objectid = "6285213"
  item.place = "lfinger"
  item.name = "Four Winds"
  item.container = "-1"

]]>
</description>
</plugin>

<!--  Get our standard constants -->

<include name="constants.lua"/>

<triggers>
  <trigger
   enabled="y"
   match="^{invmon}(?&lt;action&gt;.*),(?&lt;objectid&gt;.*),(?&lt;container&gt;.*),(?&lt;location&gt;.*)$"
   name="invmon"
   script="broadcast_invmon"
   sequence="100"
   regexp="y"
   omit_from_output="y"
  >
  </trigger>

  <trigger
   enabled="y"
   match="^{invitem}(.*)$"
   name="invitem"
   script="invitem"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>

  <trigger
   enabled="y"
   match="############# Reconnecting to Game #############"
   sequence="100"
   script="check_inventory"
  >
  </trigger>
  <trigger
   enabled="y"
   match="Welcome to Aardwolf. May your adventures be mystical, challenging and rewarding."
   sequence="100"
   script="check_inventory"
  >
  </trigger>
  <trigger
   enabled="y"
   regexp="y"
   name="invmonon"
   match="^You will now see inventory update tags.$"
   sequence="100"
   script="invmon"
  >
  </trigger>
  <trigger
   enabled="y"
   regexp="y"
   name="invmonoff"
   match="^You will no longer see inventory update tags.$"
   sequence="100"
   script="invmon"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You remove (?&lt;item&gt;.*) from (around )*your (?&lt;place&gt;.*).$"
   name="remove1"
   script="removeeq"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You stop using (?&lt;item&gt;.*) as a (?&lt;place&gt;.*).$"
   name="remove2"
   script="removeeq"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You remove your (?&lt;item&gt;.*).$"
   name="removecatchall"
   script="removeeq"
   sequence="101"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You stop holding (?&lt;item&gt;.*).$"
   name="removehold"
   script="removeeq"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^(?&lt;item&gt;.*) stops floating (?&lt;place&gt;.*) you.$"
   name="remfloat"
   script="removeeq"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="You remove (?&lt;item>.*), making the room a little darker.$"
   name="removelight"
   script="removeeq"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You stop wielding (?&lt;item&gt;.*) in your off-hand.$"
   name="removeoff"
   script="removeeq"
   sequence="99"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You stop wielding (?&lt;item&gt;.*) in your primary hand.$"
   name="removewield"
   script="removeeq"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You wear (?&lt;item&gt;.*) (around|on) your (?&lt;place&gt;.*).$"
   name="wear1"
   script="weareq"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You (equip|wear) (?&lt;item&gt;.*) as a (?&lt;place&gt;.*).$"
   name="wear2"
   script="weareq"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You equip your (?&lt;item&gt;.*)\. (.*)\.$"
   name="wearcatchall"
   script="weareq"
   sequence="101"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You hold (?&lt;item&gt;.*) in your hand.$"
   name="wearhold"
   script="weareq"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^(?&lt;item&gt;.*) begins floating (?&lt;place&gt;.*) you.$"
   name="wearfloat"
   script="weareq"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="You light (?&lt;item&gt;.*) and hold it.$"
   name="wearlight"
   script="weareq"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You proudly pin (?&lt;item&gt;.*) to your (?&lt;place&gt;.*).$"
   name="wearpin"
   script="weareq"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You wield (?&lt;item&gt;.*) in your off-hand.$"
   name="wieldoff"
   script="weareq"
   sequence="99"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You wield (?&lt;item&gt;.*).$"
   name="wield"
   script="weareq"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^You are not wearing that item.$"
   name="removefail"
   script="removeeq"
   sequence="100"
   regexp="n"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^You do not have that item.$"
   name="wearfail"
   script="weareq"
   sequence="100"
   regexp="n"
   omit_from_output="n"
  >
  </trigger>
 <trigger
   enabled="y"
   match="^{invdetails}$"
   script="invdetails_redirect"
   omit_from_output="n"
   name="start_invdetails"
   sequence="100"
   regexp="y"
  >
  </trigger>

  <trigger
   enabled="n"
   match="*"
   script="invdetails_redirect"
   name="multi_line_invdetails"
   omit_from_output="n"
   group="invdetails"
   sequence="10"
  >
  </trigger>
 <trigger
   enabled="y"
   match="^{eqdata}$"
   script="eqdata_redirect"
   omit_from_output="n"
   name="start_eqdata"
   sequence="100"
   regexp="y"
  >
  </trigger>

  <trigger
   enabled="n"
   match="*"
   script="eqdata_redirect"
   name="multi_line_eqdata"
   omit_from_output="n"
   group="eqdata"
   sequence="10"
  >
  </trigger>

 <trigger
   enabled="y"
   match="^{invdata\s*(?&lt;container&gt;.*)}$"
   script="invdata_redirect"
   omit_from_output="n"
   name="start_invdata"
   sequence="100"
   regexp="y"
  >
  </trigger>

  <trigger
   enabled="n"
   match="*"
   script="invdata_redirect"
   name="multi_line_invdata"
   omit_from_output="n"
   group="invdata"
   sequence="10"
  >
  </trigger>
</triggers>



<script>
<![CDATA[
internalrevision = "$Rev$"

dofile (GetPluginInfo (GetPluginID (), 20) .. "luapath.lua")

require "var"
require "serialize"
require "commas"
require "pluginhelper"
require "verify"
require "aardutils"

function toggleoutput(tflag)
  local trigstoupdate = {"invmon", "start_invdetails", "multi_line_invdetails", "start_eqdata",
                    "multi_line_eqdata" , "start_invdata", "multi_line_invdata"}
  for i,v in ipairs(trigstoupdate) do
    if tflag then
      SetTriggerOption(v, "omit_from_output", "n");
    else
      SetTriggerOption(v, "omit_from_output", "y");
    end
  end
end

function afterdebug()
  toggleoutput(phelper.tdebug)
end

function aftershowset()
  toggleoutput(phelper.showoutput)
end

item = {}
item_name = ''
invdetails = {}
eqdata = {}
invdata = {}
invdata_temp = {}
eqdata_cache = {}
invdata_cache = {}
invdetails_cache = {}
containers_cache = {}

place = 0
waiting = {}

function check_inventory()
  if not verify_bool(phelper.isinvmonon) then
    SendNoEcho('invmon on')
  end
--  if not next(eqdata) then
--    SendNoEcho('eqdata')
--  end
--  if not next(invdata) then
--    SendNoEcho('invdata')
--  end
end

function invitem( name, line, wildcards)
  local rline = wildcards[1]
  local tstuff = dataparse(rline, 'eqdata')
  if invdata[tstuff.objectid] == nil then
    invdata[tstuff.objectid] = tstuff
    invdata_cache[tstuff.objectid] = tstuff
  else
    invdata[tstuff.objectid].shortflags = tstuff.shortflags
  end
  phelper:broadcast(12)
end

function invmon ( name, line, wildcards )
  if name == "invmonon" then
    phelper:set('isinvmonon', true)
  elseif name == "invmonoff" then
    phelper:set('isinvmonon', false)
  end
end


function builditem(wildcards)
  local item = {}
  item.placestr = wearlocs[tonumber(wildcards.location) + 1] or -1
  item.wearloc = wildcards.location
  item.objectid = wildcards.objectid
  item.container = wildcards.container
  item.name = item_name
  return item
end

function broadcast_invmon ( name, line, wildcards )
  phelper:mdebug(line)
  item = builditem(wildcards)
  if tonumber(wildcards.action) ~= 1 then
    local items = serialize.save( "item", item )
    phelper:broadcast(tonumber(wildcards.action), items, items)
    name = ''
  end
  checkaction(tonumber(wildcards.action), item)

end

function checkaction(action, item, afterwait)
  waiting = {}
  if action == 1 then
    if eqdata[tonumber(item.wearloc)] ~= nil then
      eqdata[tonumber(item.wearloc)] = nil
      invdata[item.objectid] = eqdata_cache[item.objectid]
      phelper:broadcast(11)
      phelper:broadcast(12)
    end
  elseif action == 2 then
    eqdata[tonumber(item.wearloc)] = eqdata_cache[item.objectid]
    phelper:broadcast(11)
    if next(invdata) then
      invdata[item.objectid] = nil
      phelper:broadcast(12)
    end
  elseif action == 3 or action == 7 then
    invdata[item.objectid] = nil
    phelper:broadcast(12)
  elseif action == 4 then
    --invdata[item.objectid] = invdata_cache[item.objectid]
    --local titem = serialize.save( "invdata", invdata )
    --phelper:broadcast(12)
    --if afterwait then
    --  invdata[item.objectid] = invdata_cache[item.objectid]
    --  local titem = serialize.save( "invdata", invdata )
    --  phelper:broadcast(12)
    --else
    --  SendNoEcho('invdata')
    --  waiting.objectid = item.objectid
    --  waiting.action = 4
    --end

  elseif action == 5 or action == 6 then
    --SendNoEcho('invdata')
    --SendNoEcho('invdata ' .. item.container)

  --elseif action == 6 then

  end
end

function removeeq ( name, line, wildcards )
  item.name = wildcards.item
  local items = serialize.save( "item", titem )
  phelper:broadcast(1, items, items)
  name = ''
end

function weareq ( name, line, wildcards )
  item_name = wildcards.item
end

function geteq (type, container)

  if type == 'inventory' or type == 'invdata' then
    local titem = serialize.save_simple( invdata )
    return titem
  elseif type == 'worn' or type == 'eqdata' then
    local titem = serialize.save_simple( eqdata )
    return titem
  elseif type == 'container' then
    if containers_cache[container] ~= nil then
      local titem = serialize.save_simple( containers_cache[container] )
      return titem
    end
  end
  return serialize.save_simple( {} )
end

layout ={
invheader = {"objectid", "level", "itemtype", "value", "weight", "wearable", "flags", "owner", "fromclan", "timer", "u1", "u2", "u3", "score"},
container = {"capacity", "heaviestitem", "holding", "itemsinside", "totalweight", "itemsburden", "itemweightpercent"},
statmod = {"stat", "value"},
resistmod = {"resist", "value"},
weapon = {"type", "avedam", "inflicts", "damtype", "special"},
skillmod = {"skillnum", "value"},
spells = {"uses", "level", "sn1", "sn2", "sn3", "sn4", "u1"},
food = {"percent"},
drink = {"servings", "liquid", "liquidmax", "liquidleft", "thirstpercent", "hungerpercent", "u1"},
furniture = {"hpregen","manaregen","u1"},
eqdata = {"objectid", "shortflags", "itemname", "level", "itemtype", "unique", "wearloc", "timer"},
light = {"duration"},
portal = {"uses"}
}

function addmod(ltype, mod)
  if invdetails[ltype] == nil then
    invdetails[ltype] = {}
  end
  invdetails[ltype][mod[1]] = tonumber(mod[2])
end


function invdetails_redirect (name, line, wildcards, styles)
  -- start of spells list? remove old ones
  ltype = 'unknown'
  if name == "start_invdetails" then
    invdetails = {}
    phelper:enabletriggroup("invdetails", true)
    return
  elseif line == "{/invdetails}" then
    phelper:enabletriggroup("invdetails", false)
    invdetails_cache[invdetails.objectid] = invdetails
    local titem = serialize.save( "item", invdetails )
    phelper:broadcast(10, titem, titem)
    if waiting.action and waiting.objectid == invdetails.objectid then
      checkaction(waiting.action, invdetails, true)
    end
    return
  end -- if

  ttype = string.match(line,"{(.*)}")
  if layout[ttype] then
    ltype = ttype
  else
    print('no layout for', ttype)
  end

  local tlist = utils.split(line, '}')
  local llist = utils.split(tlist[2], '|')
  if layout[ltype] then
    if ltype == "statmod" or ltype == "resistmod" or ltype == "skillmod" then
      addmod(ltype, llist)
    else
      for i,v in ipairs(layout[ltype]) do
        if ltype == 'invheader' then
          local value = llist[i]
          if v == 'itemtype' or v == 'level' then
            value = tonumber(value)
          end
          invdetails[v] = value
        else
          if invdetails[ltype] == nil then
            invdetails[ltype] = {}
          end
          local value = llist[i]
          if v == 'wearloc' or v == 'itemtype' or v == 'level' then
            value = tonumber(value)
          end
          invdetails[ltype][v] = value
        end
      end
    end
  end
end

function dataparse(line, layoutname)
  local tlist = utils.split(line, ',')
  local wearloc = tlist[7]
  local titem = {}
  for i,v in ipairs(layout[layoutname]) do
    local value = tlist[i]
    if v == 'wearloc' or v == 'itemtype' or v == 'level' then
      value = tonumber(value)
    end
    titem[v] = value
  end
  return titem
end

function eqdata_redirect (name, line, wildcards, styles)
  -- start of spells list? remove old ones
  ltype = 'unknown'
  if name == "start_eqdata" then
    eqdata = {}
    phelper:enabletriggroup("eqdata", true)
    return
  elseif line == "{/eqdata}" then
    phelper:enabletriggroup("eqdata", false)
    phelper:broadcast(11)
    return
  end -- if

  if line ~= "" then
    titem = dataparse(line, 'eqdata')
    eqdata[tonumber(titem.wearloc)] = titem
    eqdata_cache[titem.objectid] = titem
  end

end

function invdata_redirect (name, line, wildcards, styles)
  -- start of spells list? remove old ones
  ltype = 'unknown'
  if name == "start_invdata" then
    invdata_temp = {}
    place = 0
    if wildcards.container then
      invdata_temp['container'] = trim(wildcards.container)
      --if containers_cache[invdata.container] == nil then
      --  DoAfterSpecial(5,'SendNoEcho("invdetails " .. invdata.container)',12)
      --end
    end
    phelper:enabletriggroup("invdata", true)
    return
  elseif line == "{/invdata}" then
    phelper:enabletriggroup("invdata", false)
    if invdata_temp.container ~= "" then
      containers_cache[invdata_temp.container] = invdata_temp
      phelper:broadcast(13, invdata_temp.container, invdata_temp.container)
    else
      invdata = invdata_temp
      phelper:broadcast(12)
    end
    return
  end -- if

  place = place + 1
  titem = dataparse(line, 'eqdata')
  titem.place = place
  invdata_temp[titem.objectid] = titem
  invdata_cache[titem.objectid] = titem
end

--function cmd_showstuff(cmddict)
--  phelper:set('showoutput', true)
--end

--function cmd_hidestuff(cmddict)
--  phelper:set('showoutput', false)
--end

]]>
</script>

<script>
<![CDATA[

function OnPluginBroadcast (msg, id, name, text)
  phelper:OnPluginBroadcast(msg, id, name, text)
end

function OnPluginInstall ()
  --OnPluginEnable is automatically called by pluginhelper

  phelper:OnPluginInstall()
end -- OnPluginInstall

function OnPluginClose ()

  phelper:OnPluginClose()
end -- OnPluginClose

function OnPluginEnable ()
  -- if we are connected when the plugin loads, it must have been reloaded whilst playing
  if IsConnected () then
    check_inventory()
  end -- if already connected

  phelper:OnPluginEnable()
end -- OnPluginEnable

function OnPluginDisable ()

  phelper:OnPluginDisable()
end -- OnPluginDisable

function OnPluginConnect ()

  phelper:OnPluginConnect()
end -- function OnPluginConnect

function OnPluginDisconnect ()

  phelper:OnPluginDisconnect()
end -- function OnPluginConnect

function OnPluginSaveState ()

  phelper:OnPluginSaveState()
end -- function OnPluginSaveState

]]>
</script>

<script>
<![CDATA[


phelper:set_default('plugin_colour', 'orange')
phelper:set_default('cmd', 'binv')

--phelper:add_cmd('showstuff', {func=cmd_showstuff, help="show all the tags"})
--phelper:add_cmd('hidestuff', {func=cmd_hidestuff, help="hide all the tags"})

phelper:add_setting('isinvmonon', {help="is the invmon command on", type="bool", readonly=true, default=verify_bool(false)})
phelper:add_setting('showoutput', {help="show tags", type="bool", default=verify_bool(false), after=aftershowset})
phelper:add_setting( 'tdebug', {type="bool", help="show debugging info for this option", default=verify_bool(false), sortlev=1, after=afterdebug})

phelper:enable()
]]>
</script>
</muclient>
