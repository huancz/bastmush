<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- $Id$ -->
<!-- Saved on Monday, December 01, 2008, 3:08 PM -->
<!-- MuClient version 4.37 -->


<muclient>
<plugin
   name="Aardwolf_Regen"
   author="Bast"
   id="952f716e12d4fb06621b7b25"
   language="Lua"
   purpose="wear a ring of regen at certain times"
   save_state="y"
   date_written="2008-12-01 15:06:56"
   requires="4.37"
   version="1.0"
   >
<description trim="y">
<![CDATA[
This plugin is designed to wear the regen ring in certain rooms and when sleeping
The regen ring must be in your inventory and not in a container

It will wear the regen ring when
  sleeping
  when entering a regen room
    To add a room, go to that room and type "regen add"
  when idling

It will remove the regen ring when
  standing
  when leaving a regen room
  when you stop idling

Requires swalec's aardwolf exit detector
]]>
</description>

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Plugin help  -->

<aliases>
  <alias
   name="sleep"
   script="sleep"
   match="^(sl|sle|slee|sleep)[ ]*[.]*$"
   enabled="y"
   regexp="y"
   ignore_case="y"
   sequence="100"
  >
  </alias>
</aliases>

<script>
<![CDATA[

require "ldplugin"
require "verify"
require "serialize"
require "tprint"
--require "var"
require "pluginhelper"
require "commas"

stats = {}
oldstats = {}
status = {}
oldstatus = {}
tryremove = false
trywear = false
clientAFK = false
regenrooms = {}
runto = false


function check_room(room)
  if not room or not current_room then
    return false
  end
  room = trim(string.gsub(current_room, "%(G%)", ""))
  if regenrooms[room] == 1 then
    return true
  end
  return false
end

function wear_regen()
  if verify_bool(phelper.off) == true then
    return
  end
  if trywear then
    return
  end
  if not verify_bool(phelper.regenworn) or tryremove then
    trywear = true
    --DoAfterSpecial (3, 'try_wear()', sendto.script)
    if phelper.regensn then
      Send("wear " .. phelper.regensn .. " lfinger")
    else
      Send("wear regen lfinger")
    end
  end
end

function remove_regen()
  if tryremove then
    return
  end
  if verify_bool(phelper.regenworn) or trywear then
    tryremove = true
    Send("wear " .. phelper.oldringsn .. " lfinger")
  end
end

function try_wear()
  if not tryremove then
    Send("wear regen lfinger")
  end
end

function sleep(name, line, wildcards)
  wear_regen()
  Send(line)
end

function checkstand()
  if oldstatus.statestring == 'sleeping' and not verify_bool(phelper.inregen) then
    remove_regen()
  end
end

function add_room(name, line, wildcards)
  phelper:plugin_header()
  if current_room == nil then
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Could not get current room")
    ColourNote("", "", "")
    return
  end
  room = trim(string.gsub(current_room, "%(G%)", ""))
  if regenrooms[room] == 1 then
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", room .. " already in regen list")
    ColourNote("", "", "")
    return
  end

  regenrooms[room] = 1
  ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Added Room: " .. room)
  ColourNote("", "", "")
  wear_regen()
end

function remove_room(name, line, wildcards)
  phelper:plugin_header()
  if current_room == nil then
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Could not get current room")
    ColourNote("", "", "")
    return
  end
  room = trim(string.gsub(current_room, "%(G%)", ""))
  if regenrooms[room] == 1 then
    regenrooms[room] = nil
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", room .. " removed")
    ColourNote("", "", "")
    remove_regen()
    return
  end

  ColourNote(RGBColourToName(phelper.plugin_colour), "black", room .. " not in room list")
  ColourNote("", "", "")
end

function show_rooms(name, line, wildcards)
  phelper:plugin_header(" Regen Rooms")
  for room,_ in pairs(regenrooms) do
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", room)
  end
  ColourNote("", "", "")
end

]]>
</script>

<script>
<![CDATA[

function OnPluginBroadcast (msg, id, name, text)

  -- state change
  if id == "aaa79afcb20fa11787c5a327" then
    oldstatus = status
    status = GetPluginVariableList("aaa79afcb20fa11787c5a327")
    if status.statestring == 'active' then
       checkstand()
    end
  elseif id == "18c24130ab326dc05b49420d" then
    if msg == 2 then
      current_room = GetPluginVariable("18c24130ab326dc05b49420d", "roomname")

      oldregen  = verify_bool(phelper.inregen)
      phelper:set('inregen', check_room(current_room), {silent=true})

      if oldregen and verify_bool(phelper.inregen) then
        return
      end

      if verify_bool(phelper.inregen) and ((not verify_bool(phelper.regenworn)) or tryremove) and not runto then
        wear_regen()
        return
      end

      if (not verify_bool(phelper.inregen)) and (verify_bool(phelper.regenworn) or trywear) then
        remove_regen()
        return
      end

    end
  elseif id == "aaa7b6edb20fa44565c5a327" then
    if msg == 1 then
      runto = true
    elseif msg == 2 then
      runto = false
    end
  elseif id == "0e191dc7829ff2ac2433c2d8" then
    if msg == 1 then
      clientAFK = text == "y"
      if clientAFK and status.statestring == 'active' then
        wear_regen()
      elseif (not clientAFK) and not verify_bool(phelper.inregen) and status.statestring == 'active' then
        remove_regen()
      end
    end
  elseif id == "aaa7dc9ed92ffc6146964abc" then
    loadstring(text)()
    eqitem = item
    if msg == 2 then
      if eqitem.place == "lfinger" then
        if eqitem.name == "Aardwolf Ring of Regeneration" then
          phelper:set('regenworn',  true, {silent=true})
          phelper:set('regensn', eqitem.itemsn, {silent=trie})
          trywear = false
          SaveState()
        end
      end
    elseif msg == 1 then
      if eqitem.place == "lfinger" then
        if eqitem.name ~= "Aardwolf Ring of Regeneration" then
          phelper:set('oldringsn', eqitem.itemsn, {silent=true})
          phelper:set('oldringdesc', eqitem.name, {silent=true})
          SaveState()
        elseif eqitem.name == "Aardwolf Ring of Regeneration" then
          phelper:set('regenworn', false, {silent=true})
          tryremove = false
          SaveState()
        end
      end
    end
  end
  phelper:OnPluginBroadcast(msg, id, name, text)
end

function OnPluginInstall ()
  --OnPluginEnable is automatically called by pluginhelper

  assert (loadstring (GetVariable ("regenrooms") or "")) ()

  phelper:OnPluginInstall()
end -- OnPluginInstall

function OnPluginClose ()

  phelper:OnPluginClose()
end -- OnPluginClose

function OnPluginEnable ()
  if IsConnected () then
      current_room = GetPluginVariable("18c24130ab326dc05b49420d", "roomname")
  end -- if already connected

  ldplugin ("broadcast_runto")
  ldplugin ("Aardwolf_Exits_Detector")
  ldplugin ("broadcast_state")
  ldplugin ("broadcast_invmon")

  phelper:OnPluginEnable()
end -- OnPluginEnable

function OnPluginDisable ()

  phelper:OnPluginDisable()
end -- OnPluginDisable

function OnPluginConnect ()

  phelper:OnPluginConnect()
end -- function OnPluginConnect

function OnPluginDisconnect ()

  phelper:OnPluginDisconnect()
end -- function OnPluginConnect

function OnPluginSaveState ()
  SetVariable ("regenrooms",
               "regenrooms = " .. serialize.save_simple (regenrooms))

  phelper:OnPluginSaveState()
end -- function OnPluginSaveState

]]>
</script>

<!--  Aliases  -->

<aliases>
  <alias
   name="plugin_parse"
   script="plugin_parse_helper"
   match="nothing"
   enabled="y"
   regexp="y"
   ignore_case="y"
   sequence="110"
   expand_variables="y"
  >
  </alias>
</aliases>

<script>
<![CDATA[

phelper:add_setting('inregen', {help="whether you are in a room in the regen room list", type="bool", default=verify_bool(false), readonly=true})
phelper:add_setting('regenworn', {help="whether you are wearing a regen ring", type="bool", default=verify_bool(false), readonly=true})
phelper:add_setting('regensn', {help="the sn for the regen ring", type="string", default="", readonly=true})
phelper:add_setting('oldringsn', {help="the sn for the old ring", type="string", default="", readonly=true})
phelper:add_setting('oldringdesc', {help="the description for the old ring", type="string", default="", readonly=true})
phelper:add_setting('off', {help="turn off wearing ring", type="bool", default=verify_bool(true)})

phelper:set_default('cmd', 'regen')
phelper:set_default('plugin_colour', 'orange')

phelper:add_cmd('add', {func=add_room, help="add current room as a regen room"})
phelper:add_cmd('remove', {func=remove_room, help="remove current room as a regen room"})
phelper:add_cmd('show', {func=show_rooms, help="show rooms"})

phelper:enable()
tprint(phelper)
]]>
</script>
</muclient>
