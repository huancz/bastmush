<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- $Id$ -->
<muclient>
<plugin
   name="miniwin_map"
   author="Bast"
   id="eee20c766a44169e0f1d9585"
   language="Lua"
   purpose="redirect map to miniwin"
   date_written="2008-07-18"
   requires="4.52"
   version="2.0"
   save_state="y"
   >
<description trim="y">
Redirects the map to a mini window.
</description>

</plugin>

<!--  Triggers  -->
<triggers>
  <trigger
      enabled="y"
      match="{coords}*"
      send_to="12"
      sequence="100"
      script="process_coords"
      omit_from_output="y"
  >
  </trigger>

  <trigger
   enabled="y"
   match="&lt;MAPSTART&gt;"
   script="map_redirect"
   omit_from_output="y"
   name="map_start"
   sequence="100"
  >
  </trigger>

  <trigger
   enabled="n"
   match="*"
   script="map_redirect"
   name="multi_line_map"
   omit_from_output="y"
   sequence="10"
  >
  </trigger>

  <trigger
   enabled="y"
   match="&lt;MAPEND&gt;"
   script="map_redirect"
   omit_from_output="y"
   name="map_end"
   sequence="5"
  >
  </trigger>

  <trigger
   enabled="y"
   match="You can now sense anger in your immediate area."
   sequence="100"
   send_to="12"
  >
  <send>SendNoEcho ("map")</send>
  </trigger>

</triggers>


<!--  Script  -->

<script>
<![CDATA[

require 'var'
require 'pluginhelper'
require "miniwin"
require "tprint"
require "commas"
require "serialize"

-- pull in telnet option handling
dofile (GetPluginInfo (GetPluginID (), 20) .. "telnet_options.lua")

Mapwinc = Miniwin:subclass()

function Mapwinc:post_create_window_internal()
  super(self)
  if PKroom and self.changeborderpkroom then
    check (WindowRectOp (self.id, 1, 0, 0, 0, 0, self:get_colour('pk_window_border_colour')))
    check (WindowRectOp (self.id, 1, 1, 1, -1, -1, self:get_colour('pk_window_border_colour')))
  end
end


mapwin = Mapwinc:new{name="Map"}
mapwin:add_setting("pk_window_border_colour", {help="the colour of the window", type="colour", default=verify_colour("red"), sortlev=35, longname="Window Border colour when in PK room"})
mapwin:add_setting("changeborderpkroom", {help="toggle to change the border when in a pk room", type="bool", default=false, sortlev=35, longname="Change Window Border colour when in PK Room"})
mapwin:set_default('header_height', 2)
mapwin:set_default('height_padding', 3)
mapwin:set_default('width_padding', 4)


legwin = Miniwin:new{name="Legend"}
legwin:set_default('header_height', 0)
legwin:set_default('windowpos', 12)
legwin:set_default('use_tabwin', false)

map_lines = {}
coords = nil
PKroom = false

dirmap = {
  e = 'east',
  w = 'west',
  n = 'north',
  s = 'south',
  u = 'up',
  d = 'down'
}

info = {
"@WMap legend:@w",
"",
"  @M#@w  - You                      --- - North/south wall",
"  @R*@w  - Other players             |  - East/west wall",
"  @Y!@w  - Mobiles                   +  - Door (closed)",
"  @C!@w  - Pet/other charmed mob     @B+@w  - Door (locked)",
"  @R!@w  - Angry mob (with Sense     >  - Up exit",
"       Anger cast)               @y>@w  - Up exit (closed)",
"  @G!@w  - Unkillable Mob            <  - Down exit",
"  @G$@w  - Shopkeeper                @y<@w  - Down exit (closed)",
"",
" @C[@W?@C]@w - Area exit                 @R#@w  - PK-flagged room",
" @G[@W?@G]@w - Clan public hall exit     @RD@w  - Donation room",
"",
"@WTerrains:@w",
"",
" [ ]   Inside             . .   City",
" @g, `@w   Field              @G; ;@w   Hills",
" @y/@w     Mountain           @B~ ~@w   Water",
" @B~ ~@w   Waternoswim        @c. .@w   Air",
" @y~ ~@w   Desert             @Y% %@w   Quicksand",
" @b~ ~@w   Underwater         @C~ ~@w   Ice",
" @B. .@w   Underground        - -   East/West road",
" . .   North/South road   @C~ ~@w   River",
" @R/@w     Volcano            @b% %@w   Cave",
" # #   Dungeon            @g( *@w   Forest",
}

function process_coords ( name, line, wildcards, styles )
  local tcoords = wildcards[1]
  if tcoords == "-1" then
    coords = nil
    return
  end
  local tstyle = {}
  style = {}
  style.text = "["
  style.len = #style.text
  style.backcolour = mapwin.bg_colour
  style.textcolour = 0x00D600
  style.style = 0
  table.insert (tstyle, style)
  style = {}
  style.text = " Coords: "
  style.len = #style.text
  style.backcolour = mapwin.bg_colour
  style.textcolour = 0xF0FFFF
  style.style = 0
  table.insert (tstyle, style)
  style = {}
  style.text = tcoords
  style.len = #style.text
  style.backcolour = mapwin.bg_colour
  style.textcolour = 0x00D600
  style.style = 0
  table.insert (tstyle, style)
  style = {}
  style.text = "]"
  style.len = #style.text
  style.backcolour = mapwin.bg_colour
  style.textcolour = 0x00D600
  style.style = 0
  table.insert (tstyle, style)

  
  coords = tstyle
end

function godir(win, flags, hotspot_id)
  SendNoEcho(dirmap[hotspot_id:lower()])
end

function godirlocked(win, flags, hotspot_id)
  SendNoEcho('open ' .. dirmap[hotspot_id:lower()])
  SendNoEcho(dirmap[hotspot_id:lower()])
end

function goenter(win, flags, hotspot_id)
    phelper:mdebug('enter', hotspot_id)
--  SendNoEcho('enter ' .. dir)
end


dirfunc = {}
dirfunc['E'] = godir
dirfunc['(E)'] = godirlocked
dirfunc['W'] = godir
dirfunc['(W)'] = godirlocked
dirfunc['N'] = godir
dirfunc['(N)'] = godirlocked
dirfunc['S'] = godir
dirfunc['(S)'] = godirlocked
dirfunc['U'] = godir
dirfunc['(U)'] = godirlocked
dirfunc['D'] = godir
dirfunc['(D)'] = godirlocked


function convert_exits(styles)
  local tstyles = {}
  for i,v in ipairs(styles) do
    if v.text:find(':') then
      phelper:mdebug(v)
      local texits = {}
      local tvar = utils.split(v.text, " ")
      for t,e in ipairs(tvar) do
        local estyle = {}
        estyle.textcolour = v.textcolour
        estyle.text = e .. ' '
        local test = dirfunc[e]
        if test ~= nil then
          if test == godirlocked then
            local replacements = {['('] = '', [')'] = ''}
            estyle.hotspot_id = string.gsub(e, ".", replacements)
          else
            estyle.hotspot_id = e
          end
          estyle.mousedown = test
        end
        table.insert(tstyles, estyle)
      end
    else
      table.insert(tstyles, v)
    end
  end
  
  style = popup_style(legwin, "LG", "yellow")
  style.hjust = "right"
  table.insert (tstyles, style)
  return tstyles
end

-- map redirector
function map_redirect (name, line, wildcards, styles)
  EnableTrigger ("multi_line_map", true)  -- capture subsequent lines

  if name == "map_start" then
    map_lines = {}
  elseif name == "map_end" then
    if coords then
      map_lines[#map_lines - 1] = coords
    end
    EnableTrigger ("multi_line_map", false)  -- no more lines to go
    if #map_lines > 19 then
      if trim(map_lines[2][1].text) == "" then
        table.remove(map_lines, 2)
      elseif trim(map_lines[3][1].text) == "" then
        table.remove(map_lines, 3)
      end
    end

    if map_lines[1][1].textcolour == 255 then
      PKroom = true
    else
      PKroom = false
    end
    
    mapwin:enable()
    mapwin:createwin(map_lines)
    
    legwin:enable()
    legwin:createwin(info)
  else
    if line:find('Exits') then
       styles = convert_exits(styles)
    end
    for i,v in ipairs(styles) do
      v.backcolour = "bg_colour"
    end
    table.insert (map_lines, styles)
  end -- if

end -- function map_redirect

]]>
</script>

<script>
<![CDATA[

function OnPluginBroadcast (msg, id, name, text)
  phelper:OnPluginBroadcast(msg, id, name, text)
end

function OnPluginInstall ()
  --OnPluginEnable is automatically called by pluginhelper

  phelper:OnPluginInstall()
end -- OnPluginInstall

function OnPluginClose ()
  --OnPluginDisable is automatically called by pluginhelper

  phelper:OnPluginClose()
end -- OnPluginClose

function OnPluginEnable ()

  phelper:OnPluginEnable()
end -- OnPluginEnable

function OnPluginDisable ()
  if GetPluginInfo(GetPluginID (), 17) and IsConnected() then
    TelnetOptionOff (TELOPT_MAP)
    TelnetOptionOff (TELOPT_ROOM_NAMES)
    TelnetOptionOff (TELOPT_EXIT_NAMES)
  end

  phelper:OnPluginDisable()
end -- OnPluginDisable

function OnPluginConnect ()
  TelnetOptionOn (TELOPT_AUTOMAP)
  TelnetOptionOff (TELOPT_SHORTMAP)
  TelnetOptionOn (TELOPT_MAP)
  TelnetOptionOn (TELOPT_ROOM_NAMES)
  TelnetOptionOn (TELOPT_EXIT_NAMES)

  phelper:OnPluginConnect()
end -- function OnPluginConnect

function OnPluginDisconnect ()

  phelper:OnPluginDisconnect()
end -- function OnPluginConnect

function OnPluginSaveState ()

  phelper:OnPluginSaveState()
end -- function OnPluginSaveState

]]>
</script>

<script>
<![CDATA[

phelper:set_default('cmd', 'mmap')
phelper:set_default('plugin_colour', 'steelblue')

phelper:add_pobject('win', mapwin)
phelper:add_pobject('legend', legwin)

phelper:enable()

phelper:addaardhelps{"Map", "Automap", "Maprun", "Maptags", "Speedwalks", "Academy-Geography"}
phelper:addaardcmds{"map", "automap", "maprun", "tags", "runto"}

]]>
</script>
</muclient>
