<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- $Id$ -->
<muclient>
<plugin
   name="xBroadcast_EQ"
   author="Bast"
   id="aaa6dc9ed92ffc6146964abc"
   language="Lua"
   purpose="broadcast wearing or removing of eq"
   save_state="y"
   date_written="2009-02-22 14:20:07"
   requires="4.38"
   version="1.0"
   >

<description trim="y">
<![CDATA[
[FOR PLUGIN AUTHORS ONLY]

Broadcasts when items are worn or removed
Broadcasts
   1 - eq worn, item is passed as text
       item = { item = item, place = place}
   1 - eq removed, item is passed as text
       item = { item = item, place = place}

Example
  function OnPluginBroadcast (msg, id, name, text)
    if id == "aaa6dc9ed92ffc6146964abc" and msg == 2 then
      -- eq removed
      loadstring( text )()
      eqinfo = item
    end
  end

]]>
</description>
</plugin>

<!--  Get our standard constants -->

<include name="constants.lua"/>
<triggers>
  <trigger
   enabled="y"
   match="^You remove (?<item>.*) from (around )*your (?<place>.*).$"
   name="remove1"
   script="removeeq"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You stop using (?<item>.*) as a (?<place>.*).$"
   name="remove2"
   script="removeeq"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You remove your (?<item>.*).$"
   name="removecatchall"
   script="removeeq"
   sequence="101"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You stop holding (?<item>.*).$"
   name="removehold"
   script="removeeq"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^(?<item>.*) stops floating (?<place>.*) you.$"
   name="remfloat"
   script="removeeq"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="You remove (?<item>.*), making the room a little darker.$"
   name="removelight"
   script="removeeq"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You stop wielding (?<item>.*) in your off-hand.$"
   name="removeoff"
   script="removeeq"
   sequence="99"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You stop wielding (?<item>.*) in your primary hand.$"
   name="removewield"
   script="removeeq"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You wear (?<item>.*) (around|on) your (?<place>.*).$"
   name="wear1"
   script="weareq"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You (equip|wear) (?<item>.*) as a (?<place>.*).$"
   name="wear2"
   script="weareq"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You equip your (?<item>.*)\. (.*)\.$"
   name="wearcatchall"
   script="weareq"
   sequence="101"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You hold (?<item>.*) in your hand.$"
   name="wearhold"
   script="weareq"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^(?<item>.*) begins floating (?<place>.*) you.$"
   name="wearfloat"
   script="weareq"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="You light (?<item>.*) and hold it.$"
   name="wearlight"
   script="weareq"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You proudly pin (?<item>.*) to your (?<place>.*).$"
   name="wearpin"
   script="weareq"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You wield (?<item>.*) in your off-hand.$"
   name="wieldoff"
   script="weareq"
   sequence="99"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You wield (?<item>.*).$"
   name="wield"
   script="weareq"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^You are not wearing that item.$"
   name="removefail"
   script="removeeq"
   sequence="100"
   regexp="n"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^You do not have that item.$"
   name="wearfail"
   script="weareq"
   sequence="100"
   regexp="n"
   omit_from_output="n"
  >
  </trigger>
</triggers>



<script>
<![CDATA[
require "var"
require "serialize"
require "commas"
require "pluginhelper"
require "verify"

wear_table = {}
wear_table['off-hand'] = 'second'
wear_table['right ear'] = 'rear'
wear_table['left ear']  = 'lear'
wear_table['right finger'] = 'rfinger'
wear_table['left finger'] = 'lfinger'
wear_table['left wrist'] = 'lwrist'
wear_table['right wrist'] = 'rwrist'
wear_table['primary hand'] = 'wield'

function removeeq ( name, line, wildcards )
  local place = ''
  if name == "removewield" then
    wildcards.place = "primary hand"
  elseif name == "removeoff" then
    wildcards.place = "off-hand"
  elseif name == "removelight" then
    wildcards.place = "light"
  elseif name == "removehold" then
    wildcards.place = "hold"
  end
  if wildcards.place then
    temp = wear_table[wildcards.place]
    if temp then
      place = temp
    else
      place = wildcards.place
    end
  end
  local item = {place = place, item = wildcards.item}
  local titem = serialize.save( "item", item )
  broadcast(2, titem, titem)
end

function weareq ( name, line, wildcards )
  local place = ''
  if name == "wield" then
    wildcards.place = "primary hand"
  elseif name == "wieldoff" then
    wildcards.place = "off-hand"
  elseif name == "wearlight" then
    wildcards.place = "light"
  elseif name == "wearhold" then
    wildcards.place = "hold"
  end
  if wildcards.place then
    local temp = wear_table[wildcards.place]
    if temp then
      place = temp
    else
      place = wildcards.place
    end
  end
  local item = {place = place, item = wildcards.item}
  local titem = serialize.save( "item", item )
  broadcast(1, titem, titem)
end

function OnPluginEnable ()

end

function OnPluginDisable ()
  BroadcastPlugin(-1)
end


function OnPluginSaveState ()
  SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))
  plugin_save_vars(options_table)
end -- function OnPluginSaveState

function OnPluginInstall ()

 if GetVariable ("enabled") == "false" then
    ColourNote ("yellow", "", "Warning: Plugin " .. GetPluginName ().. " is currently disabled.")
    check (EnablePlugin(GetPluginID (), false))
    return
  end -- they didn't enable us last time

end -- OnPluginInstall
]]>
</script>

<aliases>
  <alias
   name="plugin_parse"
   script="plugin_parse_helper"
   match="nothing"
   enabled="y"
   regexp="y"
   ignore_case="y"
   sequence="110"
   expand_variables="y"
  >
  </alias>
</aliases>

<script>
<![CDATA[

option_set_default('cmd', 'beq')
option_set_default('plugin_colour', 'orange')

init_plugin_vars()
set_plugin_alias()
]]>
</script>
</muclient>
