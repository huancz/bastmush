<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- $Id$ -->
<!-- Saved on Thursday, May 17, 2007, 9:30 AM -->
<!-- MuClient version 4.05 -->

<!-- TODO: Add ability to show window even when moons are not known - show "Unknown" in the plot -->
<muclient>
<plugin
   name="miniwin_moonbot"
   author="Balaam/Bast"
   id="eee9913955ee86427355ad5e"
   language="Lua"
   purpose="moon phase tracker"
   save_state="y"
   date_written="2007-05-17 09:28:14"
   requires="4.52"
   version="2.0"
   >
<description trim="y">
<![CDATA[
Show the moons in a miniwindow
]]>
</description>
</plugin>

<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   group="moons"
   match="^You notice the (black|grey|white) moon falling to the (ea|we)st.$"
   name="moonsetting"
   regexp="y"
   script="moonsetting"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   group="moons"
   match="^You see the (black|grey|white) moon rising in the (ea|we)st.$"
   name="moonrising"
   regexp="y"
   script="moonrising"
   sequence="100"
  >
  </trigger>
</triggers>

<!--  Script  -->
<script>
<![CDATA[

require "utils"
require "commas"

-- var is required for pluginhelper below
require "var"
require "pluginhelper"
require "miniwin"
require "ldplugin"
require "verify"

moonwin = Miniwin:new{name="Moons"}
moonwin:set_default('windowpos', 4)
moonwin:set_default('font_size', 8)
moonwin:set_default('header_height', 0)
moonwin:set_default('text_colour', 'gold')
moonwin:add_setting("black_colour", {help="the colour for the black moon", type="colour", default=verify_colour("midnightblue"), sortlev=35})
moonwin:add_setting("white_colour", {help="the colour for the white moon", type="colour", default=verify_colour("white"), sortlev=35})
moonwin:add_setting("grey_colour", {help="the colour for the grey moon", type="colour", default=verify_colour("dimgray"), sortlev=35})
moonwin:add_setting("three_colour", {help="the colour for the when three moons are up", type="colour", default=verify_colour("lime"), sortlev=36})
moonwin:add_setting("three_bg_colour", {help="the colour for the background when the three moons are up", type="colour", default="bg_colour", sortlev=36})

countdown = nil
countdowndur = nil

moons = {
  black={now=nil,cycle=50,up=13},
  grey={now=nil,cycle=30,up=8},
  white={now=nil,cycle=65,up=17}
}

function styleplotdata()
  local texttable = {}
  local max_width = 0

  local style = {}

  if (moons.black.now == nil ) or
     (moons.grey.now == nil ) or
     (moons.white.now == nil ) then
     return
  end

  -- heading

  local tplotdata=buildplotdata(phelper.plotlength)
  for i,t in pairs(tplotdata) do
    local tstyle = {}
    style = {}
    style.text = "["
    style.len = 1
    style.style = 0
    table.insert (tstyle, style)
    for u,v in ipairs(t) do
      style = {}
      style.backcolour = moonwin.header_colour
      style.style = 0
      style.len = 1
      if v then
        style.text = "O"
        style.textcolour = i.."_colour"
        union = true
        for moon,_ in pairs(moons) do
          union = union and tplotdata[moon][u]
        end
        if union then
          style.textcolour = 'three_colour'
          style.backcolour = 'three_bg_colour'
        end
      else
        style.text = "."
      end
      table.insert (tstyle, style)
    end
    style = {}
    style.text = "]"
    style.len = #style.text
    style.style = 0
    table.insert (tstyle, style)
    table.insert (texttable, tstyle)
  end

  local offset
  local duration
  offset, duration = nextunion()
  style = {}
  if offset == 0 then
    durstring = convert_ticks(duration)
    style.text = "3 moons are up for " .. tostring(duration) .. " ticks (" .. durstring.string .. ")!!"
    style.textcolour = 'three_colour'
    local mstyle = {}
    mstyle.text = ' Moons: ' .. duration .. ' '
    mstyle.textcolour = moonwin.three_colour
    moonwin.tabcolour = moonwin:get_colour(moonwin.three_bg_colour)
    moonwin:tabbroadcast(true, {mstyle})
  else
    durstring = convert_ticks(duration)
    offstring = convert_ticks(offset)
    style.text = "Next Union in " .. tostring(offset) .. " ticks (" .. offstring.string .. ") for " .. tostring(duration) .. " ticks (" .. durstring.string .. ")."
    local mstyle = {}
    mstyle.text = ' Moons: ' .. offset .. '-' .. duration .. ' '
    --mstyle.textcolour = moonwin.text_colour
    --moonwin.tabcolour = moonwin.bg_colour
    moonwin.tabcolour = nil
    moonwin:tabbroadcast(true, {mstyle})
  end
  max_width = math.max (max_width, #style.text)
  style.len = #style.text
  style.style = 0
  table.insert (texttable, {style})

  moonwin:enable()
  moonwin:addtab('default', texttable)
  moonwin:changetotab('default')

end -- plotdatastyle

function plotdata()
  if (moons.black.now == nil ) or
     (moons.grey.now == nil ) or
     (moons.white.now == nil ) then
    Note( "The cycle of one or more moons is unknown.")
  else
    local tplotdata=buildplotdata(phelper.plotlength)
    for i,t in pairs(tplotdata) do
      local temp = "["
      for _,v in ipairs(t) do
        if v then
          temp = temp.."O"
        else
          temp = temp.."."
        end
      end
      print(temp.."] "..i)
    end
  end
end

function buildplotdata(length)
  local tplotdata={white={},grey={},black={}}
  for i = 0,length do
    for m,t in pairs(tplotdata) do
      table.insert(t, ((moons[m].now + i ) % moons[m].cycle) < moons[m].up)
    end
  end
  return tplotdata
end

function moonsetting( tname, tstr, wildcards )
  local moon = wildcards[1]
  local changed = false
  if moons[moon].now == nil then
    moons[moon].now = moons[moon].up - 1
    changed = true
  end
  if moons[moon].now ~= moons[moon].up - 1 then
    moons[moon].now = moons[moon].up - 1
    print("moonbot: lost the", moon, "moon, had to reset")
    changed = true
  end
  if changed then
    styleplotdata()
  end
end-- moonsetting

function moonrising( tname, tstr, wildcards)
  local moon = wildcards[1]
  local changed = false
  if moons[moon].now == nil then
    moons[moon].now = 0
    changed = true
  end
  if moons[moon].now ~= 0 then
    print("moonbot: lost the", moon, "moon, had to reset")
    moons[moon].now = 0
    changed = true
  end
  if changed then
    styleplotdata()
  end
end

function ontick( tname, tstr, wildcards)
  for i,v in pairs(moons) do
    if moons[i].now ~= nil then
      moons[i].now = (v.now+1) % v.cycle
    end
  end
  if countdown == nil then
    countdown, countdowndur = nextunion()
    if countdown == 0 and countdowndur > 0 then
      ColourNote("lime", "black", "Three moons are up for "..countdowndur.." ticks!" )
    end
  else
    if countdown == 0 then
      countdowndur = countdowndur - 1
    else
      countdown = countdown - 1
    end
    if countdown == 0 and countdowndur > 0 then
      ColourNote("lime", "black", "Three moons are up for "..countdowndur.." ticks!" )
    elseif countdowndur == 0 then
      countdown, countdowndur = nextunion()
    end
  end
  styleplotdata()
end

function printmoons()
  Note( "Black="..(moons.black.now or "nil")..
        " Grey="..(moons.grey.now or "nil")..
        " White="..(moons.white.now or "nil") )
end

function nextunion()
  if (moons.black.now == nil ) or
     (moons.grey.now == nil ) or
     (moons.white.now == nil ) then
    return nil,nil
  else
    local offset = 0
    while ((moons.white.now + offset) % moons.white.cycle >= moons.white.up) or
          ((moons.black.now + offset) % moons.black.cycle >= moons.black.up) or
          ((moons.grey.now + offset) % moons.grey.cycle >= moons.grey.up) do
      offset = offset + 1
    end
    local duration = 1
    while ((moons.white.now + offset + duration) % moons.white.cycle < moons.white.up) and
          ((moons.black.now + offset + duration) % moons.black.cycle < moons.black.up) and
          ((moons.grey.now + offset + duration) % moons.grey.cycle < moons.grey.up) do
      duration = duration + 1
    end
    return offset,duration
  end
end -- nextunion()

function moonbot_union(cmddict)
  print(nextunion())
  return true
end -- moonbot_union

function moonbot_reset(cmddict)
  for i,v in pairs(moons) do
    moons[i].now = nil
  end
  countdown = nil
  countdowndur = nil
  moonwin:disable()
  ColourNote("", "", "")
  ColourNote( "orange",  "black", "Moonbot reset" )
  ColourNote("", "", "")
end -- moonbot_reset

function moonbot_report(cmddict)
  chan = cmddict[1]
  if not chan or chan == '' then
    chan = phelper.reportchan
  end
  offset, duration = nextunion()
  if offset == nil then
    print('The position of one or more moons is unknown')
    return
  else
    if offset == 0 then
      durstring = convert_ticks(duration)
      SendNoEcho(chan .. " 3 moons are up for " .. tostring(duration) .. " ticks (" .. durstring.string .. ")!!")
    else
      durstring = convert_ticks(duration)
      offstring = convert_ticks(offset)
      SendNoEcho(chan .. " Next Union in " .. tostring(offset) .. " ticks (" .. offstring.string .. ") for " .. tostring(duration) .. " ticks (" .. durstring.string .. ").")
    end
  end
end

]]>
</script>

<script>
<![CDATA[

function OnPluginBroadcast (msg, id, name, text)
  if id == "aaa70b4680508448e19b8b25" and msg == 1 then
    ontick()
  end
  phelper:OnPluginBroadcast(msg, id, name, text)
end

function OnPluginInstall()

  phelper:OnPluginInstall ()  -- do initialization stuff
end -- OnPluginInstall

function OnPluginClose()

  phelper:OnPluginClose()
end -- OnPluginClose

function OnPluginEnable ()
  ldplugin("broadcast_tick")

  phelper:OnPluginEnable()
end -- OnPluginEnable

function OnPluginDisable ()

  phelper:OnPluginDisable()
end -- OnPluginDisable

function OnPluginConnect ()

  moonbot_reset()
  phelper:OnPluginConnect()
end -- OnPluginConnect

function OnPluginDisconnect ()

  phelper:OnPluginDisconnect()
end -- function OnPluginConnect

function OnPluginSaveState()

  phelper:OnPluginSaveState()
end

]]>
</script>

<script>
<![CDATA[

phelper:add_setting('plotlength', {help="set the length of the moon plot", type="number", high=80, low=0, after=styleplotdata, default=66})
phelper:add_setting('reportchan', {help="the default channel to do a moons report to", type="string", default='gt'})

phelper:set_default('cmd', 'mb')
phelper:set_default('plugin_colour', 'lime')

phelper:add_cmd('plot', {func=plotdata, help="plot moons"})
phelper:add_cmd('union', {func=moonbot_union, help="show next moons union"})
phelper:add_cmd('print', {func=printmoons, help="print the current moon phase #s"})
phelper:add_cmd('mreset', {func=moonbot_reset, help="reset the moons"})
phelper:add_cmd('report', {func=moonbot_report, help="report the position of the moons"})

phelper:add_pobject('win', moonwin)

phelper:enable()

]]>
</script>

</muclient>
