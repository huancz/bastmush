<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- $Id$ -->
<muclient>
<plugin
   name="xBroadcast_Quest"
   author="Bast"
   id="aaa8a9eda20fa11787c6b438"
   language="Lua"
   purpose="Broadcast whenever anything happens with a quest"
   save_state="y"
   date_written="2009-02-20 12:31:01"
   requires="4.34"
   version="1.0"
   >

<description trim="y">
<![CDATA[
[FOR PLUGIN AUTHORS ONLY]

Broadcasts when anything happens in a quest
Broadcasts
   1 - can now quest
   2 - Mob info : get var.quest_info and loadstring it
        see below
   3 - time left to finish quest
        timer = {secs = num, text = 'time in text format' }
   4 - quest mob killed
   5 - length of quest, get var.quest_info and loadstring it
        see below
   6 - rewards : get var.quest_info and loadstring it, values will be 0 if not applicable
        see below
   7 - time left until next quest
        timer = {secs = num, text = 'time in text format' }
   8 - failed the quest

Example:
  function OnPluginBroadcast (msg, id, name, text)
    if id == "aaa8a9eda20fa11787c6b438" and msg == 2 then
      local pvar = GetPluginVariable(  "aaa8a9eda20fa11787c6b438" , "mob")

      --get the mob info
      loadstring( pvar )()
      mob_info = mob
    end
  end

quest_info looks like this:
quest_info = {}
  quest_info.starttime = 1242241160
  quest_info.lucky = 0
  quest_info.mobroom = "The Cage of the Oni"
  quest_info.mobarea = "Anthrox"
  quest_info.tier = 0
  quest_info.trains = 0
  quest_info.tp = 0
  quest_info.mccp = "2"
  quest_info.pracs = 0
  quest_info.gold = "3060"
  quest_info.finishtime = 1242241200
  quest_info.mobname = "the oni"
  quest_info.failed = 0
  quest_info.qp = "14"

]]>
</description>

</plugin>


<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   match="Welcome to Aardwolf. May your adventures be mystical, challenging and rewarding."
   send_to="12" sequence="100"
  >
  <send>
  Send("quest info")
  </send>
  </trigger>

  <trigger
   enabled="y"
   match="############# Reconnecting to Game #############"
   sequence="100"
   send_to="12"
  >
  <send>
  Send("quest info")
  </send>
  </trigger>

  <trigger
   enabled="y"
   regexp="y"
   match="^You ask .* for a quest.$"
   script="start_questor_stuff"
   sequence="100"
  >
  </trigger>

  <trigger
   enabled="n"
   regexp="y"
   match="^.* tells you 'Seek (.*) out somewhere in the vicinity'$"
   name="mobName"
   group="qinfo"
   script="mobName"
   sequence="100"
   text_colour="6"
  >
  </trigger>

  <trigger
   enabled="n"
   regexp="y"
   match="^.* tells you 'of (.*) which is in the general area'$"
   name="roomName"
   group="qinfo"
   script="roomName"
   sequence="100"
   text_colour="6"
  >
  </trigger>

  <trigger
   enabled="n"
   regexp="y"
   match="^.* tells you 'of (.*).'$"
   name="areaName"
   group="qinfo"
   script="areaName"
   sequence="100"
   text_colour="6"
  >
  </trigger>

  <trigger
   enabled="n"
   regexp="y"
   match="^.* tells you 'You have (.*) to complete your quest.'$"
   name="questor_time"
   script="questor_time"
   sequence="10"
   group="qinfo"
  >
  </trigger>

 <trigger
   enabled="n"
   regexp="y"
   match="^QUEST: You have almost completed your QUEST!$"
   sequence="100"
   script="quest_done"
   group="questin"
  >
  </trigger>

 <trigger
   enabled="n"
   regexp="y"
   match="^(.*) tells you 'Congratulations (.*) on completing your quest!'$"
   sequence="100"
   script="quest_handed_in"
   group="questin"
  >
  </trigger>

  <trigger
   enabled="y"
   regexp="y"
   match="^You hang your head in shame and admit defeat (.*).$"
   script="quest_fail"
   sequence="100"
   group="questin"
  >
  </trigger>

 <trigger
   enabled="y"
   regexp="y"
   match="^There are (.*) minutes remaining until you can go on another quest.$"
   sequence="100"
   script="quest_time_to_go"
  >
  </trigger>

 <trigger
   enabled="y"
   regexp="y"
   match="^QUEST: You may now quest again.$"
   sequence="100"
   script="quest_available"
  >
  </trigger>

  <trigger
   enabled="y"
   regexp="y"
   match="^You do not have to wait to go on another quest.$"
   sequence="100"
   script="quest_available"
  >
  </trigger>

  <!-- quest rewards -->
  <trigger
   enabled="n"
   match="^.* tells you 'As a reward, I am giving you (\d*) quest points and (\d*) gold.'$"
   name="qcompletecatcher"
   regexp="y"
   script="quest_rewards"
   sequence="100"
   group="questrew"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^.* tells you 'I am also giving you (.*) quest points? tier bonus.'$"
   name="tierqpcatcher"
   regexp="y"
   group="questrew"
   script="quest_rewards"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   regexp="y"
   match="^You get lucky and gain an extra (.*) quest points.$"
   name="luckyqpcatcher"
   script="quest_rewards"
   group="questrew"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   regexp="y"
   match="^You gain an extra (.*) quest points 'MCCP Bonus'.$"
   name="mccpqpcatcher"
   script="quest_rewards"
   group="questrew"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^\*\* You gain a bonus trivia point! \*\*$"
   name="qtpcatcher"
   regexp="y"
   script="quest_rewards"
   group="questrew"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^\*\* You gain a bonus (\d?)\s?training sessions? \*\*\s*$"
   name="qtraincatcher"
   regexp="y"
   script="quest_rewards"
   group="questrew"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^\*\* You gain a bonus (\d?)\s?practices? \*\*\s*$"
   name="qpraccatcher"
   regexp="y"
   script="quest_rewards"
   group="questrew"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   match="*"
   name="finishqpcatcher"
   script="quest_rewards"
   group="questrew"
   sequence="101"
  >
  </trigger>
</triggers>

<!--  Timers  -->


<timers>
  <timer
      script="update_timer"
      enabled="y"
      second="30.00"
      name="questtimer"
      >
  </timer>
</timers>

<!--  Script  -->


<script>
<![CDATA[

require "var"
require "serialize"
require "commas"
require 'pluginhelper'
require "verify"

onquest = false
quest_info = {}
timer  ={}

function blankquest ()
  quest_info = {}
  quest_info.finishtime = -1
  quest_info.starttime = -1
  quest_info.mobname = ''
  quest_info.mobarea = ''
  quest_info.mobroom = ''
  quest_info.qp = 0
  quest_info.gold = 0
  quest_info.tier = 0
  quest_info.mccp = 0
  quest_info.lucky = 0
  quest_info.tp = 0
  quest_info.trains = 0
  quest_info.pracs = 0
  quest_info.failed = 0
end

function quest_handed_in (name, line, wildcards)
  enabletriggroup("questin", false)
  quest_info['finishtime'] = GetInfo(304)
  var.quest_info = serialize.save( "quest_info", quest_info )
  broadcast(5, var.quest_info)
  when_required = os.time () + (30 * 60)  -- 30 mins to go
  onquest = false
  update_timer()
  check(EnableTimer("questtimer", true))
  enabletriggroup("questrew", true)

end -- quest_handed_in

function quest_available (name, line, wildcards)
  check(EnableTimer("questtimer", false))
  broadcast(1)
end -- quest_available

function quest_fail(name, line, wildcards)
  enabletriggroup("questin", false)
  when_required = os.time () + (15 * 60)  -- 15 mins to go
  onquest = false
  update_timer()
  quest_info.failed = 1
  var.quest_info = serialize.save( "quest_info", quest_info )
  broadcast(8, var.quest_info)
  check(EnableTimer("questtimer", true))
end

function quest_done (name, line, wildcards)
  check(EnableTimer("questtimer", false))
  broadcast(4)
end -- quest_done

function quest_time_to_go (name, line, wildcards)
  local mins = tonumber (wildcards [1])
  if mins then
    when_required = os.time () + mins * 60
  end -- if
  update_timer()
end -- quest_time_to_go

function start_questor_stuff (name, line, wildcards)
  enabletriggroup("qinfo", true)
  blankquest()
  quest_info['starttime'] = GetInfo(304)
end -- start_questor_stuff

function mobName( strTriggerName, trig_line, wildcards )
  quest_info['mobname'] = wildcards[1]
end -- mobName

function roomName( strTriggerName, trig_line, wildcards )
  quest_info['mobroom'] = wildcards[1]
end -- roomName

function areaName( strTriggerName, trig_line, wildcards )
  quest_info['mobarea'] = wildcards[1]
  var.quest_info = serialize.save( "quest_info", quest_info )
  broadcast(2, var.quest_info)
end

function questor_time (name, line, wildcards)

  local text = wildcards [1]

   -- work out when quest ends

  when_required = os.time ()

  local days = string.match (text, "(%d+) days?")
  if days then
    when_required = when_required + tonumber (days) * 60 * 60 * 24
  end -- some days left

  local hours = string.match (text, "(%d+) hours?")
  if hours then
    when_required = when_required + tonumber (hours) * 60 * 60
  end -- some days left

  local minutes = string.match (text, "(%d+) minutes?")
  if minutes then
    when_required = when_required + tonumber (minutes) * 60
  end -- some days left

  onquest = true
  enabletriggroup("qinfo", false)
  enabletriggroup("questin", true)
  update_timer()
  check(EnableTimer("questtimer", true))

end -- questor_end

function update_timer()
  -- how long to go
  if when_required == nil then
    return
  end
  local time_to_go = when_required - os.time ()
  timer['secs'] = time_to_go
  timer['text'] = convert_time(time_to_go)
  var.timer = serialize.save( "timer", timer )
  if onquest then
    broadcast(3, var.timer)
  else
    broadcast(7, var.timer)
  end
end

function quest_rewards (name, line, wildcards)
  if name == 'finishqpcatcher' then
    if trim(line) == '' then
      enabletriggroup("questrew", false)
      var.quest_info = serialize.save( "quest_info", quest_info )
      broadcast(6, var.quest_info)
    end
  elseif name == "qcompletecatcher" then
    quest_info['qp'] = wildcards[1]
    quest_info['gold'] = wildcards[2]
  elseif name == "tierqpcatcher" then
    quest_info['tier'] = wildcards[1]
  elseif name == "luckyqpcatcher" then
    quest_info['lucky'] = wildcards[1]
  elseif name == "mccpqpcatcher" then
    quest_info['mccp'] = wildcards[1]
  elseif name == "qtpcatcher" then
    quest_info['tp'] = 1
  elseif name == "qtraincatcher" then
    if wildcards[1] == "" then
      quest_info['trains'] = 1
    else
      quest_info['trains'] = wildcards[1]
    end
  elseif name == "qpraccatcher" then
    if wildcards[1] == "" then
      quest_info['pracs'] = 1
    else
      quest_info['pracs'] = wildcards[1]
    end
  end
end

]]>
</script>

<script>
<![CDATA[

function OnPluginBroadcast (msg, id, name, text)
  PluginhelperOnPluginBroadcast(msg, id, name, text)
end

function OnPluginInstall ()
  --OnPluginEnable is automatically called by pluginhelper

  PluginhelperOnPluginInstall()
end -- OnPluginInstall

function OnPluginClose ()

  PluginhelperOnPluginClose()
end -- OnPluginClose

function OnPluginEnable ()

  PluginhelperOnPluginEnable()
end -- OnPluginEnable

function OnPluginDisable ()

  PluginhelperOnPluginDisable()
end -- OnPluginDisable

function OnPluginConnect ()

  PluginhelperOnPluginConnect()
end -- function OnPluginConnect

function OnPluginDisconnect ()

  PluginhelperOnPluginDisonnect()
end -- function OnPluginConnect

function OnPluginSaveState ()

  PluginhelperOnPluginSaveState()
end -- function OnPluginSaveState

]]>
</script>


<!--  Aliases  -->

<aliases>
  <alias
   name="plugin_parse"
   script="plugin_parse_helper"
   match="nothing"
   enabled="y"
   regexp="y"
   ignore_case="y"
   sequence="110"
   expand_variables="y"
  >
  </alias>
</aliases>

<script>
<![CDATA[

option_set_default('cmd', 'bqu')
option_set_default('plugin_colour', 'orange')

init_plugin_vars()
set_plugin_alias()

]]>
</script>
</muclient>
