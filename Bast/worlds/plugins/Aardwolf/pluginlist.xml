<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- $Id$ -->

<muclient>
<plugin
   name="PluginFunctions"
   author="Bast"
   id="e8520531407cb4281bea544e"
   language="Lua"
   purpose="plugin functions such as reload, list, etc"
   save_state="y"
   date_written="2009-02-28 20:14:46"
   requires="4.40"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<script>
<![CDATA[

require "var"
require "serialize"
require "commas"
require "pluginhelper"
require "verify"
require "tprint"
require "pairsbykeys"
require "ldplugin"

phelpplugins = {}

function format_plugin(plugin)
  hname = string.format("%-30s", tostring(plugin.name))
  hver = string.format("%.2f  ", plugin.version)
  hcmd = string.format("%-10s", tostring(plugin.cmd))
  hdeb = string.format("%-8s", tostring(plugin.tdebug))
  hena = string.format("%-10s", tostring(plugin.enabled))
  ColourNote(RGBColourToName(var.plugin_colour),  "black",  hname .. hver .. hcmd .. hdeb .. hena)
end

function format_header()
  hname = string.format("%-30s", "Name")
  hver = string.format("%-6s", "Vers" )
  hcmd = string.format("%-10s", "Cmd/Short")
  hdeb = string.format("%-8s", "Debug")
  hena = string.format("%-10s", "Enabled")
  ColourNote(RGBColourToName(var.plugin_colour),  "black",  hname .. hver .. hcmd .. hdeb .. hena)
end

function plugins_list_helper(header, type)
  plugin_header(header)
  format_header()
  ColourNote("white", "black", "-----------------------------------------------------------------------")
  local loadedplugins = GetPluginList() or {}
  local pluginsall = {}
  for _, id in pairs(loadedplugins) do
    pluginsall[GetPluginInfo(id, 1)] = { id = id,
                       name = GetPluginInfo(id, 1),
                       cmd = GetPluginVariable(id, 'cmd') or "",
                       tdebug = GetPluginVariable(id, 'tdebug') or "",
                       enabled = GetPluginInfo(id, 17),
                       version = GetPluginInfo(id, 19),
                     }
     if phelpplugins[id] then
       pluginsall[GetPluginInfo(id, 1)].phelp = true
     end
  end
  for _,v in pairsByKeys(pluginsall) do
    if type then
      if v[type] then
        format_plugin(v)
      end
    else
      format_plugin(v)
    end
  end
  ColourNote("", "", "")
end

function cmd_list(name, line, wildcards)
  plugins_list_helper("Plugins List")
end


function cmd_phelp(name, line, wildcards)
  plugins_list_helper("PHelper Plugins List", 'phelp')
end


function match_plugin_name(plugin, name)
  if (string.find(plugin, name) or -1) > 0 then
    return true
  end
  return false
end

function getmatches(name)
  local matches = {}
  local numfound = 0
  local loadedplugins = GetPluginList() or {}
  for _, p in ipairs (loadedplugins) do
    local temp = { name = GetPluginInfo (p, 1),
                  cmd = GetPluginVariable(p, 'cmd') or "" }
    if match_plugin_name(temp.name, name) or match_plugin_name(temp.cmd, name) then
      matches[p] = temp
      numfound = numfound + 1
    end
  end
  return numfound, matches
end

functionlist = {
  Reload = {all = reloadallplugins, one = reloadplugin, tstr = "reloaded"},
  Enable = {all = enableallplugins, one = enableplugin, tstr = "enabled"},
  Disable = {all = disableallplugins, one = disableplugin, tstr = "disabled"},
}

function dofunc(type, id)
  local tfunc = functionlist[type]['one']
  tfunc(id)
end

function cmd_helper(type, tomatch, other)
  if tomatch == "all" then
    local tfunc = functionlist[type]['all']
    tfunc()
    return
  end
  local numfound = 0
  local matches = {}
  numfound, matches = getmatches(tomatch)
  if numfound > 1 and other ~= 'all' then
    plugin_header(type)
    ColourNote(RGBColourToName(var.plugin_colour), "black", "multiple plugins match: " .. tomatch)
    for id, t in pairs(matches) do
      ColourNote(RGBColourToName(var.plugin_colour), "black", " " .. t.name)
    end
    ColourNote("", "", "")
    return
  elseif numfound < 1 then
    plugin_header(type)
    ColourNote(RGBColourToName(var.plugin_colour), "black", "no plugins match " .. tomatch)
    ColourNote("", "", "")
    return
  end
  for id, t in pairs(matches) do
    DoAfterSpecial(2, 'dofunc("' .. type .. '", "' .. id  .. '")', 12)
    if other ~= 'all' then
      return
    end
  end
  ColourNote("", "", "")
end

function cmd_reload(name, line, wildcards)
  if wildcards.list then
    tlist = utils.split(wildcards.list, ' ')
  else
    plugin_header("Reload")
    ColourNote(RGBColourToName(var.plugin_colour), "black", "I need an argument to reload something")
    ColourNote("", "", "")
    return
  end
  tomatch = tlist[1]
  arg2 = tlist[2]
  cmd_helper("Reload", tomatch, arg2)
end

function cmd_enable(name, line, wildcards)
  if wildcards.list then
    tlist = utils.split(wildcards.list, ' ')
  else
    plugin_header("Enable")
    ColourNote(RGBColourToName(var.plugin_colour), "black", "I need an argument to enable something")
    ColourNote("", "", "")
    return
  end
  tomatch = tlist[1]
  arg2 = tlist[2]
  cmd_helper("Enable", tomatch, arg2)
end

function cmd_disable(name, line, wildcards)
  if wildcards.list then
    tlist = utils.split(wildcards.list, ' ')
  else
    plugin_header("Disable")
    ColourNote(RGBColourToName(var.plugin_colour), "black", "I need an argument to disable something")
    ColourNote("", "", "")
    return
  end
  tomatch = tlist[1]
  arg2 = tlist[2]
  cmd_helper("Disable", tomatch, arg2)
end


function cmd_load(name, line, wildcards)
  if wildcards.list then
    tlist = utils.split(wildcards.list, ' ')
  else
    plugin_header("Load")
    ColourNote(RGBColourToName(var.plugin_colour), "black", "I need an argument to load something")
    ColourNote("", "", "")
    return
  end
  for _, v in ipairs(tlist) do
    ldplugin(v, true)
  end
end

function cmd_loaddir(name, line, wildcards)
  if wildcards.list then
    tlist = utils.split(wildcards.list, ' ')
  else
    plugin_header("Loaddir")
    ColourNote(RGBColourToName(var.plugin_colour), "black", "I need an argument to load something")
    ColourNote("", "", "")
    return
  end

  dir = tlist[1]

end

]]>
</script>

<script>
<![CDATA[

function OnPluginBroadcast (msg, id, name, text)
  if msg == 1001 then
    phelpplugins[id] = {name = GetPluginInfo(id, 1)}
  end --

  PluginhelperOnPluginBroadcast(msg, id, name, text)
end

function OnPluginInstall ()
  --OnPluginEnable is automatically called by pluginhelper

  PluginhelperOnPluginInstall()
end -- OnPluginInstall

function OnPluginClose ()

  PluginhelperOnPluginClose()
end -- OnPluginClose

function OnPluginEnable ()

  PluginhelperOnPluginEnable()
end -- OnPluginEnable

function OnPluginDisable ()

  PluginhelperOnPluginDisable()
end -- OnPluginDisable

function OnPluginConnect ()

  PluginhelperOnPluginConnect()
end -- function OnPluginConnect

function OnPluginDisconnect ()

  PluginhelperOnPluginDisonnect()
end -- function OnPluginConnect

function OnPluginSaveState ()

  PluginhelperOnPluginSaveState()
end -- function OnPluginSaveState

]]>
</script>


<!--  Aliases  -->

<aliases>
  <alias
   name="plugin_parse"
   script="plugin_parse_helper"
   match="nothing"
   enabled="y"
   regexp="y"
   ignore_case="y"
   sequence="110"
   expand_variables="y"
  >
  </alias>
</aliases>

<script>
<![CDATA[

option_set_default('cmd', 'plugins')
option_set_default('plugin_colour', 'red')

add_cmd('list', {func=cmd_list, help="list all plugins", default=true})
add_cmd('phelp', {func=cmd_phelp, help="list plugins that are installed with pluginhelper"})
add_cmd('reload', {func=cmd_reload, help='reload a plugin, "all" will reload all plugins, "<plugin> all" will reload all plugins that match <plugin>'})
add_cmd('load', {func=cmd_load, help="load a plugin by name"})
add_cmd('enable', {func=cmd_enable, help='enable a plugin, "all" will enable all plugins, "<plugin> all" will enable all plugins that match <plugin>'})
add_cmd('disable', {func=cmd_disable, help='disable a plugin, "all" will disable all plugins, "<plugin> all" will disable all plugins that match <plugin>'})
add_cmd('loaddir', {func=cmd_loaddir, help="load all plugins in a specific dir"})

init_plugin_vars()
set_plugin_alias()
]]>
</script>

</muclient>
