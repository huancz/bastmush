<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- $Id$ -->
<muclient>
<plugin
   name="xBroadcast_CP"
   author="Bast"
   id="aaa66f81c50828bbbfda7100"
   language="Lua"
   purpose="Broadcasts when anything happens related to a cp"
   save_state="y"
   date_written="2009-02-18 12:31:01"
   requires="4.38"
   version="1.0"
   >

<description trim="y">
<![CDATA[
[FOR PLUGIN AUTHORS ONLY]

Broadcasts when anything happens in a campaign
Broadcasts
   1 - Mob list, get var.mobs and loadstring it
       mobs = { 1 = {name = 'Some name', room = 'Some room', clean = 'A name with some stuff removed'},
              2 = {name = 'Another name', room = 'Another room', clean = 'Another name with some stuff removed'}, }
       It will be resent when a mob is killed and will be nil when a cp is not active        
   2 - timer, will be updated every 60 seconds, get var.timer and loadstring it
        timer = {secs = num, text = 'time in text format', days = days, hours = hours, mins = minutes}
   3 - rewards, get var.rewards and loadstring it, this can also be used to check when a cp is finished
        see below
   4 - campaign failed

   cp_info = {}
        cp_info.starttime = 1241305421
        cp_info.lengthdays = 0
        cp_info.lengthmins = 23
        cp_info.lengthhours = 0
        cp_info.finishtime = 1241306814
        cp_info.level = "66"
        cp_info.gold = "13683"
        cp_info.tp = 0
        cp_info.pracs = 0
        cp_info.trains = 0
        cp_info.mobs = {}
            cp_info.mobs[1] = {}
                cp_info.mobs[1].room = "Castle Vlad-Shamir"
                cp_info.mobs[1].name = "a demon shock trooper"
                cp_info.mobs[1].clean = "a demon shock trooper"
            cp_info.mobs[2] = {}
                cp_info.mobs[2].room = "Diamond Soul Revelation"
                cp_info.mobs[2].name = "Marie Antoinette"
                cp_info.mobs[2].clean = "marie antoinette"
            cp_info.mobs[3] = {}
                cp_info.mobs[3].room = "Earth Plane 4"
                cp_info.mobs[3].name = "Sateon"
                cp_info.mobs[3].clean = "sateon"
            cp_info.mobs[4] = {}
                cp_info.mobs[4].room = "Earth Plane 4"
                cp_info.mobs[4].name = "the dragon"
                cp_info.mobs[4].clean = "the dragon" 
            cp_info.mobs[5] = {}
                cp_info.mobs[5].room = "Realm of Deneria"
                cp_info.mobs[5].name = "Xorn"
                cp_info.mobs[5].clean = "xorn"
            cp_info.mobs[6] = {}
                cp_info.mobs[6].room = "Realm of Deneria"
                cp_info.mobs[6].name = "A young priest"
                cp_info.mobs[6].clean = "a young priest"
            cp_info.mobs[7] = {}
                cp_info.mobs[7].room = "Rosewood Castle"
                cp_info.mobs[7].name = "a tired looking mother"
                cp_info.mobs[7].clean = "a tired looking mother"
            cp_info.mobs[8] = {}
                cp_info.mobs[8].room = "Rosewood Castle"
                cp_info.mobs[8].name = "a red ball"
                cp_info.mobs[8].clean = "a red ball"
            cp_info.mobs[9] = {}
                cp_info.mobs[9].room = "ST:TNG"
                cp_info.mobs[9].name = "a brave crew member"
                cp_info.mobs[9].clean = "a brave crew member"
            cp_info.mobs[10] = {}
                cp_info.mobs[10].room = "The Great City of Knossos"
                cp_info.mobs[10].name = "A wild boar"
                cp_info.mobs[10].clean = "a wild boar"
        cp_info.length = 1393
        cp_info.failed = 0
        cp_info.qp = "31"
   
Example
  function OnPluginBroadcast (msg, id, name, text)
    if id == "aaa66f81c50828bbbfda7100" and msg == 1 then
      local pvar = GetPluginVariable(  "aaa66f81c50828bbbfda7100", mobs )

      -- get the mobs
      loadstring( pvar )()
      cp_mobs = mobs
    end
  end
  ]]>
</description>

</plugin>

<!--  Get our standard constants -->

<include name="constants.lua"/>

<triggers>
  <trigger
   enabled="y"
   match="Welcome to Aardwolf. May your adventures be mystical, challenging and rewarding."
   sequence="100"
   send_to="10"   
  >
  <send>cp check</send>
  </trigger>
  
  <trigger
   enabled="y"
   match="############# Reconnecting to Game #############"
   sequence="100"
   send_to="10"
  >
  <send>cp check</send>
  </trigger>

  <trigger
   enabled="y"
   match="Commander Barcett tells you 'Type 'campaign info' to see what you must kill.'"
   sequence="100"
   send_to="10" 
   script="cp_new"  
  >
  <send>cp check</send>
  </trigger>
  
  <trigger
   enabled="n"
   match="You are not currently on a campaign."
   name="cp_none"
   script="cp_none"
   sequence="100"
   group="campaigncheck"
  >
  </trigger>
  
  <trigger
   enabled="n"  
   match="You have * to finish this campaign."
   name="cp_time"
   script="cp_time"
   sequence="100"
   group="campaigncheck"
   omit_from_output="y"   
  >
  </trigger>
  
  <trigger
   enabled="n"  
   match="^You still have to kill \* (?&lt;name&gt;.*) \((?&lt;room&gt;.*)\)\.*$"
   name="campaign_item"
   script="campaign_item"
   sequence="100"
   regexp="y"
   group="campaigncheck"
   omit_from_output="y"   
  >
  </trigger>
  
 <trigger
   enabled="n"
   match="Congratulations, that was one of your CAMPAIGN mobs!"
   send_to="10"
   sequence="100"
   script="cp_mob_dead"
   group="campaignin"
  >
  </trigger>

 <trigger
   enabled="n"
   match="CONGRATULATIONS! You have completed your campaign."
   sequence="100"
   script="campaign_complete"
   group="campaignin"
  >
  </trigger>

  <trigger
   enabled="n"
   match="^(\s*)Reward of (?&lt;amount&gt;\d+) (?&lt;type&gt;.+) (.+) added.$"
   sequence="100"
   script="campaign_reward"
   group="campaignrew"
   regexp="y"   
  >
  </trigger>
  
 <trigger
   enabled="n"
   match="--------------------------------------------------------------"
   sequence="100"
   script="campaign_done"
   group="campaigndone"
  >
  </trigger>
  
 <trigger
   enabled="n"
   match="Campaign cleared."
   sequence="100"
   script="campaign_fail"
   group="campaignin"
  >
  </trigger>  
</triggers>


<!--  Aliases  -->

<aliases>
  <alias
   name="cp_check"
   script="cp_check"
   match="^(cp|campaign) check$"
   enabled="y"
   regexp="y"
   sequence="100"
  >
  <send>cp check</send>
  </alias>

</aliases>


<!--  Timers  -->

<timers>
  <timer 
      script="update_timer" 
      enabled="n" 
      second="59.00" 
      name="cp_timer"
      >
  </timer>
</timers>


<!--  Script  -->

<script>
<![CDATA[
require "var"
require "pluginhelper"
require "serialize"
require "commas"
require "verify"
require "checkplugin"
require "copytable"

rewardtable = {
  quest = 'qp',
  training = 'trains',
  gold = 'gold',
  trivia = 'tp',
  practice = 'pracs',
  }

cp_info = {}
mobsleft = {}
timer = {}
enemy = ""
curlevel = -1

function cleanname(name)
  return string.lower(string.gsub(name, ",", ""))
end

function campaign_item (name, line, wildcards)
  name = wildcards.name
  room = wildcards.room
  if not name or not room then
    print("error parsing line: ", line)
    tprint(wildcards)
  else
    table.insert(mobsleft, {name=name, room=room, clean=cleanname(name)})
  end
end -- campaign_item

function cp_mob_dead (name, line, wildcards)
  local tenemy = enemy
  local found = false
  if var.tdebug == "true" then
    print("Enemy:", string.lower(enemy))
  end
  for i,v in ipairs(mobsleft) do
    if var.tdebug == "true" then
      print("Clean:", v.clean)
    end
    if v.clean == string.lower(tenemy) then
      table.remove(mobsleft, i)
      found = true
      break
    end   
  end
  if found then
    var.mobs = serialize.save( "mobs", mobsleft )  
    broadcast(1, var.mobs)
  else
    print("CP: could not find mob", enemy)
    Execute("cp check")
  end
end

function cp_time (name, line, wildcards)
  local text = wildcards [1]
    
  -- work out when campaign ends
  
  when_required = os.time ()
  
  local days = string.match (text, "(%d+) days?")
  if days then
    when_required = when_required + tonumber (days) * 60 * 60 * 24
  end -- some days left
  
  local hours = string.match (text, "(%d+) hours?")  
  if hours then
    when_required = when_required + tonumber (hours) * 60 * 60
  end -- some days left

  local minutes = string.match (text, "(%d+) minutes?")  
  if minutes then
    when_required = when_required + tonumber (minutes) * 60
  end -- some days left
  
  enabletriggroup("campaigncheck", false)
  enabletriggroup("campaignin", true)  
  
  if not next(cp_info['mobs']) then
    cp_info['mobs'] = copytable.shallow(mobsleft)
    SaveState()
  end
  var.mobs = serialize.save( "mobs", mobsleft ) 
  broadcast(1, var.mobs) 
  update_timer()
  check(EnableTimer("cp_timer", true))  	

end -- cp_time

function campaign_done (name, line, wildcards)

  var.cp_info = serialize.save( "cp_info", cp_info ) 
  SaveState()
  broadcast(3, var.cp_info)
  cp_none() 
end -- campaign_done

function campaign_fail (name, line, wildcards)
  cp_info.failed = 1
  var.cp_info = serialize.save( "cp_info", cp_info )   
  SaveState()
  broadcast(4, var.cp_info)
  cp_none() 
end -- campaign_done

function campaign_reward (name, line, wildcards)
  local type = wildcards.type
  local amount = wildcards.amount
  cp_info[rewardtable[type]] = amount
  enabletriggroup("campaigndone", true)
end

function campaign_complete(name, line, wildcards)
  enabletriggroup("campaignrew", true)
  cp_info['finishtime'] = GetInfo(304)  
  cp_info['length'] = math.floor( math.abs( cp_info['starttime'] - cp_info['finishtime'] ) )  
  days, hours, mins = SecondsToDHM(cp_info['length'])
  cp_info['lengthdays'] = days
  cp_info['lengthhours'] = hours
  cp_info['lengthmins'] = mins
end

function update_timer()
  -- how long to go
  local time_to_go = when_required - os.time ()
  timer['secs'] = time_to_go
  timer['text'] = convert_time(time_to_go)
  local days, hours, mins = SecondsToDHM(time_to_go)
  timer['days'] = days
  timer['hours'] = hours
  timer['mins'] = mins
  var.timer = serialize.save( "timer", timer )
  broadcast(2, var.timer)
end

function cp_check( name, line, wildcards)
  enabletriggroup("campaigncheck", true)
  mobsleft = {}
  timer = {}  
end -- cp_check


function cp_new()
  cp_info = {}
  cp_info['mobs'] = {}
  cp_info['trains'] = 0
  cp_info['pracs'] = 0
  cp_info['gold'] = 0
  cp_info['tp'] = 0
  cp_info['qp'] = 0
  cp_info['failed'] = 0
  cp_info['level'] =  curlevel 
  cp_info['starttime'] = GetInfo(304)  
  cp_info['finishtime'] = 0
  cp_info['length'] = 0
  cp_info['lengthdays'] = 0
  cp_info['lengthhours'] = 0
  cp_info['lengthmins'] = 0
  SaveState()
end

function cp_none( name, line, wildcards)
  enabletriggroup("campaigncheck", false)
  enabletriggroup("campaignin", false)
  enabletriggroup("campaignrew", false)
  enabletriggroup("campaigndone", false)
  check(EnableTimer("cp_timer", false))    
  timer = {}  
end

function OnPluginBroadcast (msg, id, name, text)
  if msg == 1 and id == "8a710e0783b431c06d61a54c" then
  
    -- get one variable
    enemy = GetPluginVariable ("8a710e0783b431c06d61a54c", "enemy")
    curlevel = GetPluginVariable ("8a710e0783b431c06d61a54c", "level")
  end -- stats changed
end

function SecondsToDHM(sSeconds)
  local nSeconds = tonumber(sSeconds)
  if nSeconds == 0 then
    return "00:00:00"
  else
    nDays = math.floor(nSeconds/(3600 * 24))
    nHours = math.floor(nSeconds/3600 - (nDays * 24))
    nMins = math.floor(nSeconds/60 - (nHours * 60) - (nDays * 24 * 60))
    return nDays, nHours, nMins
  end
end

function OnPluginEnable ()
  -- check for stats detector
  checkplugin ("8a710e0783b431c06d61a54c", "Stats_Detector.xml")
end

function OnPluginDisable ()
  BroadcastPlugin(-1)
end


function OnPluginSaveState ()
  var.cp_info = serialize.save( "cp_info", cp_info ) 
  SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))
  plugin_save_vars(options_table)  
end -- function OnPluginSaveState

function OnPluginInstall ()

 if GetVariable ("enabled") == "false" then
    ColourNote ("yellow", "", "Warning: Plugin " .. GetPluginName ().. " is currently disabled.")
    check (EnablePlugin(GetPluginID (), false))
    return
  end -- they didn't enable us last time
  assert (loadstring (GetVariable ("cp_info") or "")) ()  
end -- OnPluginInstall
]]>
</script>

<!--  Aliases  -->

<aliases>
  <alias
   name="plugin_parse"
   script="plugin_parse"
   match="nothing"
   enabled="y"
   regexp="y"
   ignore_case="y"
   sequence="110"
   expand_variables="y"
  >
  </alias>   
</aliases>

<script>
<![CDATA[

options_table  = {
  tdebug = {help="set this for debugging information", type="bool", default=verify_bool(false)},
  plugin_colour = {help="set the plugin colour", type="colour", default=verify_colour("orange")},
  cmd = {help="the command for this plugin", type="string", after=set_plugin_alias, default="bcp"},
}

cmds_table = {

}
  
function plugin_parse (name, line, wildcards)
  plugin_parse_helper(name, line, wildcards, cmds_table, options_table)
end -- plugin_parse

init_plugin_vars(options_table)
set_plugin_alias()
]]>
</script>

</muclient>

