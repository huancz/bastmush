<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- $Id$ -->
<muclient>
<plugin
   name="xBroadcast_Spelltags"
   author="Bast"
   id="aaa72f3b5453567e2bba9d50"
   language="Lua"
   purpose="broadcast spell tags"
   save_state="y"
   date_written="2009-02-23 16:17:40"
   requires="4.38"
   version="1.0"
   >
<description trim="y">
<![CDATA[
broadcast spell tags
TODO:
  read spellheaders into a sqlite database and add the info to the broadcast
  if not in the database, then reread slist stuff
]]>
</description>
</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  {affon}  -->
<triggers>
  <trigger
   name="affon"
   enabled="y"
   omit_from_output="y"
   match="^\{affon\}(?&lt;sn&gt;\d+)\,(?&lt;time&gt;\d+)$"
   script="spelltag_on"
   regexp="y"
   sequence="100"
  >
  </trigger>

  <trigger
   name="affoff"
   enabled="y"
   omit_from_output="y"
   match="^\{affoff\}(?&lt;sn&gt;\d+)$"
   script="spelltag_off"
   regexp="y"
   sequence="100"
  >
  </trigger>

<!--  {recon}  -->
 <trigger
   name="recon"
   enabled="y"
   omit_from_output="y"
   match="^\{recon\}(?&lt;sn&gt;\d+)\,(?&lt;time&gt;\d+)$"
   script="spelltag_on"
   regexp="y"
   sequence="100"
  >
  </trigger>

  <trigger
   name="recoff"
   enabled="y"
   omit_from_output="y"
   match="^\{recoff\}(?&lt;sn&gt;\d+)$"
   script="spelltag_off"
   regexp="y"
   sequence="100"
  >
  </trigger>

  <trigger
   enabled="y"
   omit_from_output="y"
   match="^\{sfail\}(?&lt;sn&gt;\-?\d+)\,(?&lt;target&gt;\d+)\,(?&lt;reason&gt;\d+)\,(?&lt;recovery&gt;\-?\d+)$"
   script="spell_failure"
   regexp="y"
   sequence="100"
  >
  </trigger>
</triggers>

<script>
<![CDATA[

require "var"
require "serialize"
require "commas"
require "pluginhelper"

function spelltag_on (name, line, wildcards)
  local spelltag = {}

  spelltag.sn = tonumber (wildcards.sn)
  spelltag.time = tonumber (wildcards.time)
  spelltags = serialize.save( "spelltag", spelltag )

  if name == 'affon' then
    bcastnum = 1
  elseif name == 'recon' then
    bcastnum = 3
  end
  phelper:broadcast(bcastnum, spelltags, spelltags)

end -- spelltag_on

function spelltag_off (name, line, wildcards)
  local spelltag = {}

  spelltag.sn = tonumber (wildcards.sn)
  spelltags = serialize.save( "spelltag", spelltag )

  if name == 'affoff' then
    bcastnum = 2
  elseif name == 'recoff' then
    bcastnum = 4
  end
  phelper:broadcast(bcastnum, spelltags, spelltags)

end -- spelltag_off

function spell_failure (name, line, wildcards)
  local sfail = {}
  sfail.sn = tonumber (wildcards.sn)
  sfail.target = tonumber (wildcards.target)
  sfail.reason = tonumber (wildcards.reason)
  sfail.recovery = tonumber (wildcards.recovery)

  sfails = serialize.save( "spelltag", sfail )

  phelper:broadcast(5, sfails, sfails)
end

]]>
</script>

<script>
<![CDATA[

function OnPluginBroadcast (msg, id, name, text)

  phelper:OnPluginBroadcast(msg, id, name, text)
end

function OnPluginInstall ()
  --OnPluginEnable is automatically called by pluginhelper

  phelper:OnPluginInstall()
end -- OnPluginInstall

function OnPluginClose ()
  --OnPluginDisable is automatically called by pluginhelper

  phelper:OnPluginClose()
end -- OnPluginClose

function OnPluginEnable ()

  phelper:OnPluginEnable()
end -- OnPluginEnable

function OnPluginDisable ()

  phelper:OnPluginDisable()
end -- OnPluginDisable

function OnPluginConnect ()

  phelper:OnPluginConnect()
end -- function OnPluginConnect

function OnPluginDisconnect ()

  phelper:OnPluginDisconnect()
end -- function OnPluginConnect

function OnPluginSaveState ()

  phelper:OnPluginSaveState()
end -- function OnPluginSaveState

]]>
</script>

<script>
<![CDATA[

phelper:set_default('cmd', 'bstag')
phelper:set_default('plugin_colour', 'steelblue')

phelper:enable()

]]>
</script>
</muclient>
