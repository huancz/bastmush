<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Saturday, April 11, 2009, 9:13 PM -->
<!-- MuClient version 4.40 -->

<!-- Plugin "StatMonitor" generated by Plugin Wizard -->

<muclient>
<plugin
   name="StatMonitor"
   author="Bast"
   id="a8f5b1a3b1373cd99d6bfb47"
   language="Lua"
   purpose="Monitor and Show Stats"
   save_state="y"
   date_written="2009-04-11 21:11:47"
   requires="4.40"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>

</triggers>

<!--  Aliases  -->

<aliases>

</aliases>

<timers>
  <timer
   name="StatReport"
   script="StatReport"
   enabled="y"
   minute="2"
   >
  </timer>

</timers>

<script>
<![CDATA[
require "var"
require "serialize"
require "commas"
require "pluginhelper"
require "verify"
require "statsdb"
require "aardutils"
require "tprint"

db = Statdb{}

quest_stuff = {}
hourtotals = {}

colourcodes = { ["@r"]=RGBColourToName( GetNormalColour( 2 ) ), ["@g"]=RGBColourToName( GetNormalColour( 3 ) ),
                ["@y"]=RGBColourToName( GetNormalColour( 4 ) ), ["@b"]=RGBColourToName( GetNormalColour( 5 ) ),
		["@m"]=RGBColourToName( GetNormalColour( 6 ) ), ["@c"]=RGBColourToName( GetNormalColour( 7 ) ),
		["@w"]=RGBColourToName( GetNormalColour( 8 ) ),
		["@R"]=RGBColourToName( GetBoldColour( 2 ) ),   ["@G"]=RGBColourToName( GetBoldColour( 3 ) ),
                ["@Y"]=RGBColourToName( GetBoldColour( 4 ) ),   ["@B"]=RGBColourToName( GetBoldColour( 5 ) ),
		["@M"]=RGBColourToName( GetBoldColour( 6 ) ),   ["@C"]=RGBColourToName( GetBoldColour( 7 ) ),
		["@W"]=RGBColourToName( GetBoldColour( 8 ) ) }
        
colours = { [1] = GetVariable( "col1" ) or "@W",
            [2] = GetVariable( "col2" ) or "@G" }

function DisplayInfo( info )
  for k,v in ipairs( info ) do
    ColourTell( colourcodes[ colours[ ( k % 2 + 1 ) or 1 ] ], "", v )
  end
  Note( "" )  
end

function formatlevel()
  local starttime = 0
  local finishtime = 0
  local mobskilled = 0
  local mobsavexp = 0
  local pvar = GetPluginVariable(  "aaa0ab9ed92f8fc614664bd1" , "levelinfo")

  --get the mob info
  loadstring( pvar )()
  levelgains = levelinfo  
  
  level = db:getstat('totallevels')
  oldlevel = level - 1
  db:open()
  for a in db.db:rows(string.format("SELECT starttime, finishtime FROM levels where level = %d;", oldlevel)) do 
    starttime = a[1]
    finishtime = a[2]
  end  
  for a in db.db:rows(string.format("SELECT count(*), AVG(xp + bonusxp) FROM mobkills where level = %s and xp > 0", oldlevel)) do
    mobskilled = a[1]
    mobsavexp = a[2]
  end  
  db:close()
  length = finishtime - starttime      
  days, hours, mins, secs = SecondsToDHMS(length)
  if levelgains.bonustrains and tonumber(levelgains.bonustrains) > 0 then
    trains = levelgains.trains .. '+' .. levelgains.bonustrains
  else
    trains = levelgains.trains
  end
  local tmsg = { "Gained a "..levelgains.type..": " }
  if levelgains.type == "pup" then
    table.insert( tmsg, trains )
    table.insert( tmsg, " trains " )
  else
    table.insert( tmsg, levelgains.hp )
    table.insert( tmsg, "hp " )
    table.insert( tmsg, levelgains.mp )
    table.insert( tmsg, "mp " )
    table.insert( tmsg, levelgains.mv )
    table.insert( tmsg, "mvs " )
    table.insert( tmsg, trains )
    table.insert( tmsg, " trains " )
    table.insert( tmsg, levelgains.pracs )
    table.insert( tmsg, " pracs " )
  end
  levelstats = ""
  for i,v in ipairs({"str", "int", "wis", "dex", "con", "luc"}) do
    if levelgains[v] > 0 then
      levelstats = levelstats..v.." "
    end
  end
  if levelstats ~= "" then
    table.insert( tmsg, levelstats )
    table.insert( tmsg, "bonus " )
  end    
  table.insert( tmsg, string.format( "%02d", days ) )
  table.insert( tmsg, "d:" )
  table.insert( tmsg, string.format( "%02d", hours) )
  table.insert( tmsg, "h:" )
  table.insert( tmsg, string.format( "%02d", mins ) )
  table.insert( tmsg, "m " )    
  table.insert( tmsg, mobskilled )
  table.insert( tmsg, " mobs killed (" )
  table.insert( tmsg, string.format( "%02.02f", mobsavexp ) )
  table.insert( tmsg, "xp/mob)" )  
  DisplayInfo( tmsg )    
end

function formatquest()
  local quest_total = -1
  local quest_avg = 0
  local quest_tavg = 0
  local pvar = GetPluginVariable(  "aaa8a9eda20fa11787c6b438" , "quest_info")

  --get the quest info
  loadstring( pvar )()
  quest_stuff = quest_info

  db:open()
  for a in db.db:rows("SELECT COUNT(*), AVG(qp + mccp + lucky + tier), AVG(finishtime - starttime) FROM quests;") do 
    quest_total = a[1]
    quest_avg = a[2]
    quest_tavg = a[3]
  end      
  db:close()
  length = quest_stuff.finishtime - quest_stuff.starttime      
  days, hours, mins, secs = SecondsToDHMS(length)      
  questgains = tostring(quest_stuff.qp)
  if quest_stuff.lucky and tonumber(quest_stuff.lucky) > 0 then
    questgains = questgains .. '+' .. tostring(quest_stuff.lucky)
  end
  if quest_stuff.mccp and tonumber(quest_stuff.mccp) > 0 then
    questgains = questgains .. '+' .. tostring(quest_stuff.mccp) 
  end
  if quest_stuff.tier and tonumber(quest_stuff.tier) > 0 then
    questgains = questgains .. '+' .. tostring(quest_stuff.tier)
  end
    
  local tmsg = { "Quest finished for ", questgains, "qp" }
  if quest_stuff.tp and tonumber(quest_stuff.tp) > 0 then
    table.insert( tmsg, " "..quest_stuff.tp )
    table.insert( tmsg, "TP" )
  end
  if quest_stuff.trains and tonumber(quest_stuff.trains) > 0 then
    table.insert( tmsg, " "..quest_stuff.trains )
    table.insert( tmsg, "tr" )
  end
  if quest_stuff.pracs and tonumber(quest_stuff.pracs) > 0 then
    table.insert( tmsg, " "..quest_stuff.pracs )
    table.insert( tmsg, "pr" )
  end
  tmsg[#tmsg] = tmsg[#tmsg]..".  It took "
  table.insert( tmsg, string.format( "%02d", mins ) )
  table.insert( tmsg, "m:" )
  table.insert( tmsg, string.format( "%02d", secs ) )
  table.insert( tmsg, "s.  Avg:" )
  table.insert( tmsg, string.format( "%02.2f", quest_avg ) )
  table.insert( tmsg, " qp/quest" )
  table.insert( tmsg, " over " )
  table.insert( tmsg, string.format( "%0d", quest_total ) )
  table.insert( tmsg, " quests." )
  DisplayInfo( tmsg )
end

function formatcp()
  local pvar = GetPluginVariable(  "aaa66f81c50828bbbfda7100" , "cp_info")
  --get the cp info
  loadstring( pvar )()
  cp_stuff = cp_info
  cpgains = tostring(cp_stuff.qp)
  length = cp_stuff.finishtime - cp_stuff.starttime      
  days, hours, mins, secs = SecondsToDHMS(length)        
  local tmsg = { "CP finished for ", cpgains, "qp" }
  if cp_stuff.tp and tonumber(cp_stuff.tp) > 0 then
    table.insert( tmsg, " "..cp_stuff.tp )
    table.insert( tmsg, "TP" )
  end
  if cp_stuff.trains and tonumber(cp_stuff.trains) > 0 then
    table.insert( tmsg, " "..cp_stuff.trains )
    table.insert( tmsg, "tr" )
  end
  if cp_stuff.pracs and tonumber(cp_stuff.pracs) > 0 then
    table.insert( tmsg, " "..cp_stuff.pracs )
    table.insert( tmsg, "pr" )
  end
  tmsg[#tmsg] = tmsg[#tmsg]..".  It took "
  table.insert( tmsg, string.format( "%02d", days ) )
  table.insert( tmsg, "d:" )
  table.insert( tmsg, string.format( "%02d", hours ) )
  table.insert( tmsg, "h:")
  table.insert( tmsg, string.format( "%02d", mins ) )
  table.insert( tmsg, "m." )

  DisplayInfo( tmsg )
end

function formatgq()
  local pvar = GetPluginVariable(  "aaa77f81c5408278ccda7100", "gq_info")
  --get the gq info
  loadstring( pvar )()
  gqgains = tostring(gq_info.qp)
  if gq_info.qpmobs and tonumber(gq_info.qpmobs) > 0 then
    gqgains = gqgains .. '+' .. tostring(gq_info.qpmobs) 
  end      
  local tmsg = { "GQ finished for ", gqgains, "qp" }
  if gq_info.tp and tonumber(gq_info.tp) > 0 then
    table.insert( tmsg, " "..gq_info.tp )
    table.insert( tmsg, "TP" )
  end
  if gq_info.trains and tonumber(gq_info.trains) > 0 then
    table.insert( tmsg, " "..gq_info.trains )
    table.insert( tmsg, "tr" )
  end
  if gq_info.pracs and tonumber(gq_info.pracs) > 0 then
    table.insert( tmsg, " "..gq_info.pracs )
    table.insert( tmsg, "pr" )
  end

  DisplayInfo( tmsg )
end

function OnPluginBroadcast (msg, id, name, text)
  if id == "aaa8a9eda20fa11787c6b438" and (msg == 6 or msg == 8) then
    DoAfterSpecial(.1 , 'formatquest()', 12)        
  elseif id == "aaa0ab9ed92f8fc614664bd1" and msg == 1 then
    DoAfterSpecial(.1, 'formatlevel()', 12)        
  elseif id == "aaa66f81c50828bbbfda7100" and (msg == 3 or msg == 4) then
    DoAfterSpecial(.1, 'formatcp()', 12)   
  elseif id == "aaa77f81c5408278ccda7100" and msg == 4 then
    DoAfterSpecial(.1, 'formatgq()', 12)  
  end
end -- OnPluginBroadcast

function formathour(type, stats)
  ColourNote("lime", "black", string.format("%-10s -" , type),
             "lime", "black", string.format("%5d", stats.total or 0),
             "lime", "black", string.format("%5d", stats.xp or 0),
             "lime", "black", string.format("%5d", stats.qp or 0),
             "lime", "black", string.format("%5d", stats.tp or 0),
             "lime", "black", string.format("%7d", stats.gold or 0)
             )
  hourtotals.qp = hourtotals.qp + (stats.qp or 0)
  hourtotals.gold = hourtotals.gold + (stats.gold or 0)
  hourtotals.xp = hourtotals.xp + (stats.xp or 0)
  hourtotals.tp = hourtotals.tp + (stats.tp or 0)
end

function formathourcol()
  ColourNote("lime", "black", string.format("%-10s -" , "Type"),
             "lime", "black", string.format("%5s", "Tot"),
             "lime", "black", string.format("%5s", "XP"),
             "lime", "black", string.format("%5s", "QP"),
             "lime", "black", string.format("%5s", "Tp"),
             "lime", "black", string.format("%7s", "Gold")
            )
end

function formattotals(totals)
  ColourNote("lime", "black", string.format("%-10s -" , "Totals"),
             "lime", "black", string.format("%5s", " "),
             "lime", "black", string.format("%5d", totals.xp or 0),
             "lime", "black", string.format("%5d", totals.qp or 0),
             "lime", "black", string.format("%5d", totals.tp or 0),
             "lime", "black", string.format("%7d", totals.gold or 0)
             )
end

function StatReport()
  local queststats = {}
  local cpstats = {}
  local gqstats = {}
  local mobstats = {}
  hourtotals.qp = 0
  hourtotals.gold = 0
  hourtotals.xp = 0
  hourtotals.tp = 0
  finishtime = GetInfo(304)  
  starttime = finishtime - (60 * 60)
  db:open()
  for a in db.db:rows(string.format("SELECT COUNT(*), SUM(qp + mccp + lucky + tier), SUM(gold), SUM(tp) FROM quests where finishtime > %d;", starttime)) do 
    queststats.total = a[1] or 0
    queststats.qp = a[2] or 0
    queststats.gold = a[3]  or 0
    queststats.tp = a[4] or 0
  end      
  for a in db.db:rows(string.format("SELECT COUNT(*), SUM(qp + qpmobs), SUM(gold), SUM(tp) FROM gquests where finishtime > %d;", starttime)) do 
    gqstats.total = a[1]
    gqstats.qp = a[2]
    gqstats.gold = a[3]
    gqstats.tp = a[4]
  end     
  for a in db.db:rows(string.format("SELECT COUNT(*), SUM(qp), SUM(gold), SUM(tp) FROM campaigns where finishtime > %d and failed = 0;", starttime)) do 
    cpstats.total = a[1]
    cpstats.qp = a[2]
    cpstats.gold = a[3]
    cpstats.tp = a[4]
  end    
   for a in db.db:rows(string.format("SELECT COUNT(*), SUM(xp + bonusxp), SUM(gold), SUM(tp) FROM mobkills where time > %d;", starttime)) do 
    mobstats.total = a[1]
    mobstats.xp = a[2]
    mobstats.gold = a[3]
    mobstats.tp = a[4]
  end    
  db:close()  
  ColourNote("lime", "black", "Stats for the Last Hour")  
  formathourcol()  
  ColourNote("lime", "black",   "---------------------------------------")  
  formathour("Quests", queststats)
  formathour("CPs", cpstats)
  formathour("GQs", gqstats)
  formathour("Mobs", mobstats)
  ColourNote("lime", "black",   "---------------------------------------")  
  formattotals(hourtotals)
  ColourNote("", "", "")
end

function settimer()
   SetTimerOption ("StatReport", "minute", var.minutes)
end

]]>
</script>

<aliases>
  <alias
   name="plugin_parse"
   script="plugin_parse"
   match="nothing"
   enabled="y"
   regexp="y"
   ignore_case="y"
   sequence="110"
   expand_variables="y"
  >
  </alias>   
</aliases>

<script>
<![CDATA[

options_table  = {
  tdebug = {help="set this for debugging information", type="bool", default=verify_bool(false)},
  plugin_colour = {help="set the plugin colour", type="colour", default=verify_colour("orange")},
  cmd = {help="the command for this plugin", type="string", after=set_plugin_alias, default="statmon"},
  minutes = {help="the number of minutes between StatMon output", type="number", after=settimer, default=60},
}

cmds_table = {

}
  
function plugin_parse (name, line, wildcards)
  plugin_parse_helper(name, line, wildcards, cmds_table, options_table)
end -- plugin_parse

init_plugin_vars(options_table)
set_plugin_alias()
]]>
</script>
</muclient>
