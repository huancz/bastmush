<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="minwin_health"
   author="Nick Gammon/Bast"
   id="43825da8d728bce6a86c37d9"
   language="Lua"
   purpose="Shows stats in a mini window"
   date_written="2009-07-08"
   requires="4.40"
   version="4.0"
   save_state="y"
   >
<description trim="y">
<![CDATA[
Install this plugin to show an info bar with HP, Mana,
and Movement points shown as a bar.

The window can be dragged to a new location with the mouse.
]]>
</description>

</plugin>


<!--  Script  -->


<script>
<![CDATA[

require "checkplugin"

GAUGE_LEFT = 60
GAUGE_HEIGHT = 13

WINDOW_WIDTH = 250
WINDOW_HEIGHT = 85
NUMBER_OF_TICKS = 5

BACKGROUND_COLOUR_NORMAL = ColourNameToRGB "slategray"
BACKGROUND_COLOUR_FIGHTING = ColourNameToRGB "rosybrown"
FONT_COLOUR = ColourNameToRGB "darkred"
BORDER_COLOUR = ColourNameToRGB "#553333"

function mousedown(flags, hotspot_id)

  -- find where mouse is so we can adjust window relative to mouse
  startx, starty = WindowInfo (win, 14), WindowInfo (win, 15)

  -- find where window is in case we drag it offscreen
  origx, origy = WindowInfo (win, 10), WindowInfo (win, 11)
end -- mousedown

function dragmove(flags, hotspot_id)

  -- find where it is now
  local posx, posy = WindowInfo (win, 17),
                     WindowInfo (win, 18)

  -- move the window to the new location
  WindowPosition(win, posx - startx, posy - starty, 0, 2);

  -- change the mouse cursor shape appropriately
  if posx < 0 or posx > GetInfo (281) or
     posy < 0 or posy > GetInfo (280) then
    check (SetCursor ( 11))   -- X cursor
  else
    check (SetCursor ( 1))   -- hand cursor
  end -- if

end -- dragmove

function dragrelease(flags, hotspot_id)
  local newx, newy = WindowInfo (win, 17), WindowInfo (win, 18)

  -- don't let them drag it out of view
  if newx < 0 or newx > GetInfo (281) or
     newy < 0 or newy > GetInfo (280) then
     -- put it back
    WindowPosition(win, origx, origy, 0, 2);
  end -- if out of bounds

end -- dragrelease


function DoGauge (sPrompt, Percent, Colour)

  local Fraction = tonumber (Percent)

  if Fraction > 1 then Fraction = 1 end
  if Fraction == 0 then return end

  local width = WindowTextWidth (win, font_id, sPrompt)

  WindowText (win, font_id, sPrompt,
                             GAUGE_LEFT - width, vertical, 0, 0, FONT_COLOUR)

  WindowRectOp (win, 2, GAUGE_LEFT, vertical, WINDOW_WIDTH - 5, vertical + GAUGE_HEIGHT, WindowInfo (win,9) )  -- fill entire box


  local gauge_width = (WINDOW_WIDTH - GAUGE_LEFT - 5) * Fraction

   -- box size must be > 0 or WindowGradient fills the whole thing
  if math.floor (gauge_width) > 0 then

    -- top half
    WindowGradient (win, GAUGE_LEFT, vertical, GAUGE_LEFT + gauge_width, vertical + GAUGE_HEIGHT / 2,
                    0x000000,
                    Colour, 2)

    -- bottom half
    WindowGradient (win, GAUGE_LEFT, vertical + GAUGE_HEIGHT / 2, GAUGE_LEFT + gauge_width, vertical +   GAUGE_HEIGHT,
                    Colour,
                    0x000000,
                    2)

  end -- non-zero

  -- show ticks
  local ticks_at = (WINDOW_WIDTH - GAUGE_LEFT - 5) / (NUMBER_OF_TICKS + 1)

  -- ticks
  for i = 1, NUMBER_OF_TICKS do
    WindowLine (win, GAUGE_LEFT + (i * ticks_at), vertical,
                GAUGE_LEFT + (i * ticks_at), vertical + GAUGE_HEIGHT, ColourNameToRGB ("silver"), 0, 1)
  end -- for

  -- draw a box around it
  check (WindowRectOp (win, 1, GAUGE_LEFT, vertical, WINDOW_WIDTH - 5, vertical + GAUGE_HEIGHT,
          ColourNameToRGB ("lightgrey")))  -- frame entire box

  vertical = vertical + font_height + 3
end -- function

function draw_bar ()

 -- find where it is now
  local posx, posy, mode, flags = WindowInfo (win, 10),
                     WindowInfo (win, 11),
                     WindowInfo (win, 7),
                     WindowInfo (win, 8)

  local height = WINDOW_HEIGHT
  local background = BACKGROUND_COLOUR_NORMAL

  local line1 = string.format ("You are %s", stats.status.pos)

  if  stats.status.enemy ~= "" then
    height = height + 20
    background = BACKGROUND_COLOUR_FIGHTING
  end -- if

  WindowCreate (win,
                 posx, posy, WINDOW_WIDTH, height,
                 mode,
                 flags,
                 background)

  -- make a hotspot
  WindowAddHotspot(win, "hs1",
                   0, 0, 0, 0,   -- whole window
                   "",   -- MouseOver
                   "",   -- CancelMouseOver
                   "mousedown",
                   "",   -- CancelMouseDown
                   "",   -- MouseUp
                   "Drag to move",  -- tooltip text
                   10, 0)  -- movement cursor

  WindowDragHandler(win, "hs1", "dragmove", "dragrelease", 0)

  -- Edge around box rectangle
  check (WindowCircleOp (win, 3, 0, 0, 0, 0, BORDER_COLOUR, 0, 2, 0, 1))

  vertical = 6  -- pixel to start at

  local width = WindowTextWidth (win, font_id, line1)
  local add_dots = false


  if  stats.status.enemy ~= "" then
    line1 = string.format ("%s", stats.status.enemy)

    -- truncate if too long
    while width > (WINDOW_WIDTH - GAUGE_LEFT - 5) do
      -- get rid of last word
      local s = string.match (" " .. line1 .. "...", "(%s%S*)$")
      if not s or #s == 0 then break end
      line1 = line1:sub (1, - (#s - 2))  -- except the last 3 dots but add the space
      width = WindowTextWidth (win, font_id, line1 .. " ...")
      add_dots = true
    end -- while

    if add_dots then
      line1 = line1 .. " ..."
    end -- if
  end

  WindowText (win, font_id, line1,
                              GAUGE_LEFT, vertical, 0, 0, FONT_COLOUR)

  vertical = vertical + font_height + 3


  DoGauge ("HP: ",   stats.vitals.hp / stats.maxstats.maxhp, ColourNameToRGB "darkgreen")

  if stats.status.enemy ~= "" then
    -- enemy name:  stats.enemy
    DoGauge ("Enemy: ", stats.status.enemypct / 100, ColourNameToRGB "darkred")
  end -- if fighting

  DoGauge ("Mana: ", stats.vitals.mana / stats.maxstats.maxmana, ColourNameToRGB "mediumblue")
  DoGauge ("Move: ", stats.vitals.moves / stats.maxstats.maxmoves, ColourNameToRGB "gold")

  WindowShow (win, true)

end -- draw_bar

function OnPluginBroadcast (msg, id, name, text)
--stats.vitals { "hp": 5280, "mana": 4390, "moves": 5185 }
--stats.stats { "str": 233, "int": 177, "wis": 213, "dex": 329, "con": 181, "luck": 245, "hr": 309, "dr": 371, "saves": 51 }
--stats.maxstats { "maxhp": 5280, "maxmana": 4390, "maxmoves": 5185, "maxstr": 110, "maxint": 100, "maxwis": 131, "maxdex": 182, "maxcon": 108, "maxluck": 157 }
--stats.worth { "gold": 322802, "bank": 0, "qp": 5257, "tp": 2, "trains": 1, "pracs": 3 }
--stats.status { "level": 180, "tnl": 1428, "hunger": 70, "thirst": 70, "align": 74, "state": 8, "pos": "Fighting" , "enemy": "a mountain cyclops", "enemypct": 12 }
--stats.base { "name": "Bast", "class": "Thief", "subclass": "Ninja", "race": "Shadow", "clan": "", "pretitle": "", "perlevel": 5000 }


  if id == '3e7dedbe37e44942dd46d264' then
    if text:find("char") then
      res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval", "char")
      tt = assert (loadstring ('return ' .. gmcparg or ""))()

      if tt['vitals'] and tt['stats'] and tt['maxstats'] and tt['worth'] and tt['status'] and tt['base'] then
          stats = tt
          draw_bar ()
      end

    end
  end

end

function OnPluginInstall ()

  win = GetPluginID ()
  font_id = "fn"

  font_name = "Fixedsys"    -- the actual font

  local x, y, mode, flags =
      tonumber (GetVariable ("windowx")) or 0,
      tonumber (GetVariable ("windowy")) or 0,
      tonumber (GetVariable ("windowmode")) or 8, -- bottom right
      tonumber (GetVariable ("windowflags")) or 0

 -- check miniwindow visible
  if x < 0 or x > GetInfo (281) or
     y < 0 or y > GetInfo (280) then
     x, y = 0, 0  -- reset to top left
  end -- if not visible

  -- make miniwindow so I can grab the font info
  check (WindowCreate (win,
                 x, y, WINDOW_WIDTH, WINDOW_HEIGHT,
                 mode,
                 flags,
                 0x000000) )


  check (WindowFont (win, font_id, font_name, 9, false, false, false, false, 0, 0))  -- normal

  font_height = WindowFontInfo (win, font_id, 1)  -- height

  if GetVariable ("enabled") == "false" then
    ColourNote ("yellow", "", "Warning: Plugin " .. GetPluginName ().. " is currently disabled.")
    check (EnablePlugin(GetPluginID (), false))
    return
  end -- they didn't enable us last time

  OnPluginEnable ()  -- do initialization stuff

end -- OnPluginInstall

function OnPluginEnable ()
end -- OnPluginEnable

function OnPluginDisable ()
  WindowShow (win, false)
end -- OnPluginDisable

function OnPluginSaveState ()
  SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))
  SetVariable ("windowx", tostring (WindowInfo (win, 10)))
  SetVariable ("windowy", tostring (WindowInfo (win, 11)))
  SetVariable ("windowmode", tostring (WindowInfo (win, 7)))
  SetVariable ("windowflags", tostring (WindowInfo (win, 8)))
end -- OnPluginSaveState


]]>
</script>

</muclient>
