<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, May 08, 2009, 10:32 AM -->
<!-- MuClient version 4.40 -->
<!-- $Id$ -->

<muclient>
<plugin
   name="xBroadcast_Area"
   author="Bast"
   id="aaa2beeda10fa11787c6b438"
   language="Lua"
   purpose="To get info from the areas command"
   save_state="y"
   date_written="2009-05-08 10:31:50"
   requires="4.40"
   version="6.1"
   >

<description trim="y">
<![CDATA[
[FOR PLUGIN AUTHORS ONLY]

Broadcasts everything from the areas command
Broadcasts
   1 - areas table ready
       two tables will be available
        - areas : the keys are the full area name
        - areasbykeyword : the keys are the keyword for the area and will only
            be available if "areas keywords" have been seen

Example
  function OnPluginBroadcast (msg, id, name, text)
    if id == "aaa2beeda10fa11787c6b438" and msg == 1 then
      local pvar = GetPluginVariable(  "aaa2beeda10fa11787c6b438", "areas" )
      areas = assert (loadstring ('return ' .. pvar or ""))()

      local pvar = GetPluginVariable(  "aaa2beeda10fa11787c6b438", "areasbykeyword" )
      areasbykeyword = assert (loadstring ('return ' .. pvar or ""))()

    end
  end

Samples:
 areas:
    "The Abyssal Caverns of Sahuagi":
      "lock"="100"
      "to"="160"
      "from"="140"
      "speedwalk"=""
      "builder"=""
      "keyword"="sahuagin"
      "name"="The Abyssal Caverns of Sahuagi"

 areasbykeyword:
    "longnight":
      "lock"="60"
      "to"="200"
      "from"="100"
      "speedwalk"=""
      "builder"=""
      "keyword"="longnight"
      "name"="Into the Long Night"


]]>
</description>

</plugin>

<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
  <trigger
   enabled="n"
   match="^From To   Lock  (?&lt;fourth&gt;.*)[ ]+Area Name[ ]*$"
   sequence="99"
   script="parseheaders"
   regexp="y"
   group="areareg"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^\s*(?&lt;from&gt;\d+)\s+(?&lt;to&gt;\d+)\s+(?&lt;lock&gt;\d+)\s+(?&lt;fourth&gt;.+?)(  )+?(?&lt;name&gt;.+?)\s*$"
   sequence="100"
   script="parsearea"
   regexp="y"
   group="areareg"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^\s*(?&lt;from&gt;\d+)\s+(?&lt;to&gt;\d+)\s+(?&lt;fourth&gt;.+?)(  )+?(?&lt;name&gt;.+?)\s*$"
   sequence="101"
   script="parsearea"
   regexp="y"
   name="nolock"
   group="areareg"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^---------------------------------------------------------------$"
   sequence="101"
   script="areas_done"
   regexp="y"
   group="area"
  >
  </trigger>
</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   name="areastart"
   script="areas_start"
   match="^(area|areas) (keyword|keywords)$"
   enabled="y"
   regexp="y"
   sequence="100"
  >
  <send>areas %2</send>
  </alias>
  <alias
   name="areastartnokeyword"
   script="areas_start"
   match="^(area|areas)$"
   enabled="y"
   regexp="y"
   sequence="100"
  >
  <send>areas</send>
  </alias>
</aliases>

<!--  Script  -->

<script>
<![CDATA[
internalrevision = "$Rev$"

dofile (GetPluginInfo (GetPluginID (), 20) .. "luapath.lua")

require "var"
require "pluginhelper"
require "serialize"
require "commas"
require "verify"
require "tprint"
require "copytable"

oldareas = {}
areas = {}
areasbykeyword = {}

fourthheader = ''

function parseheaders(name, line, wildcards)
  fourthheader = string.lower(trim(wildcards['fourth']))
end

function parsearea (name, line, wildcards)
  local name = trim(wildcards.name)
  if oldareas[name] then
    areas[name] = copytable.shallow(oldareas[name])
    areas[name]['to'] = wildcards.to
    areas[name]['from'] = wildcards.from
    areas[name][fourthheader] = wildcards['fourth']
    if name == "nolock" then
      areas[name]['lock'] = 0
    else
      areas[name]['lock'] = wildcards.lock
    end
  else
    area = {}
    area.name = name
    area.to = wildcards.to
    area.from = wildcards.from
    area.speedwalk = ''
    area.keyword = ''
    area.builder = ''
    area[fourthheader] = wildcards['fourth']
    if name == "nolock" then
      area.lock = 0
    else
      area.lock = wildcards.lock
    end
    areas[name] = area
  end
  if areas[name].keyword ~= '' then
    areasbykeyword[areas[name].keyword] = areas[name]
  end
end

function areas_start(name, line, wildcards)
  oldareas = areas
  areas = {}
  areasbykeyword = {}
  phelper:enabletriggroup("areareg", true)
  phelper:enabletriggroup("area", true)
end

function areas_done(name, line, wildcards)
  phelper:enabletriggroup("areareg", false)
  phelper:enabletriggroup("area", false)
  var.areas = serialize.save_simple( areas )
  var.areasbykeyword = serialize.save_simple( areasbykeyword )
  phelper:broadcast(1)
end

]]>
</script>

<script>
<![CDATA[

function OnPluginBroadcast (msg, id, name, text)
  phelper:OnPluginBroadcast(msg, id, name, text)
end

function OnPluginInstall ()
  --OnPluginEnable is automatically called by pluginhelper
  if IsPluginInstalled("aaa3cbbda10fa11787c6b438") then
    ColourNote("red", "black", "broadcast_area will not load if areaDB is installed, unloading")
    DoAfterSpecial(2, "plugins unload aaa2beeda10fa11787c6b438", 10)
    return
  end

  phelper:OnPluginInstall()
end -- OnPluginInstall

function OnPluginClose ()

  phelper:OnPluginClose()
end -- OnPluginClose

function OnPluginEnable ()

  phelper:OnPluginEnable()
end -- OnPluginEnable

function OnPluginDisable ()

  phelper:OnPluginDisable()
end -- OnPluginDisable

function OnPluginConnect ()

  phelper:OnPluginConnect()
end -- function OnPluginConnect

function OnPluginDisconnect ()

  phelper:OnPluginDisconnect()
end -- function OnPluginConnect

function OnPluginSaveState ()

  phelper:OnPluginSaveState()
end -- function OnPluginSaveState

]]>
</script>

<script>
<![CDATA[

phelper:set_default('cmd', 'barea')
phelper:set_default('plugin_colour', 'cyan')

phelper:enable()

]]>

</script>
</muclient>
