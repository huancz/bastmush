<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- $Id$ -->
<muclient>
<plugin
   name="xBroadcast_Quest"
   author="Bast"
   id="aaa8a9eda20fa11787c6b438"
   language="Lua"
   purpose="Broadcast whenever anything happens with a quest"
   save_state="y"
   date_written="2009-02-20 12:31:01"
   requires="4.34"
   version="4.0"
   >

<description trim="y">
<![CDATA[
[FOR PLUGIN AUTHORS ONLY]

Broadcasts when anything happens in a quest
Broadcasts
   1 - can now quest
   2 - Mob info : get var.quest_info and loadstring it
        see below
   3 - time left to finish quest
        timer = {secs = num, text = 'time in text format' }
   4 - quest mob killed
   6 - rewards and time : get var.quest_info and loadstring it, values will be 0 if not applicable
        see below
   7 - time left until next quest
        timer = {secs = num, text = 'time in text format' }
   8 - failed the quest

Example:
  function OnPluginBroadcast (msg, id, name, text)
    if id == "aaa8a9eda20fa11787c6b438" and msg == 2 then
      local pvar = GetPluginVariable(  "aaa8a9eda20fa11787c6b438" , "quest_info")

      --get the mob info
      loadstring( pvar )()
      quest_stuff = quest_info
    end
  end

xBroadcast_Quest : Broadcast 2
quest_info = {}
  quest_info.starttime = 1275941847
  quest_info.lucky = 0
  quest_info.mobroom = "The Grey Watchtower"
  quest_info.mobarea = "The Fortress of Angband"
  quest_info.tier = 0
  quest_info.trains = 0
  quest_info.tp = 0
  quest_info.mccp = 0
  quest_info.pracs = 0
  quest_info.gold = 0
  quest_info.finishtime = -1
  quest_info.mobname = "Grey Orcish Guard"
  quest_info.failed = 0
  quest_info.qp = 0

xBroadcast_Quest : Broadcast 3
timer = {}
  timer.text = "44 m"
  timer.secs = 2640

xBroadcast_Quest : Broadcast 6
quest_info = {}
  quest_info.starttime = 1275941847
  quest_info.lucky = 0
  quest_info.mobroom = "The Grey Watchtower"
  quest_info.mobarea = "The Fortress of Angband"
  quest_info.tier = 0
  quest_info.trains = 0
  quest_info.tp = 0
  quest_info.mccp = "2"
  quest_info.pracs = 0
  quest_info.gold = "3578"
  quest_info.finishtime = 1275941920
  quest_info.mobname = "Grey Orcish Guard"
  quest_info.failed = 0
  quest_info.qp = "17"

xBroadcast_Quest : Broadcast 7
timer = {}
  timer.text = "28 m"
  timer.secs = 1707

]]>
</description>

</plugin>


<!--  Triggers  -->

<triggers>

</triggers>

<!--  Timers  -->


<timers>
  <timer
      script="update_timer"
      enabled="y"
      second="30.00"
      name="questtimer"
      >
  </timer>
</timers>

<!--  Script  -->


<script>
<![CDATA[
internalrevision = "$Rev$"

dofile (GetPluginInfo (GetPluginID (), 20) .. "luapath.lua")

require "var"
require "serialize"
require "commas"
require 'pluginhelper'
require "verify"
require "ldplugin"

onquest = false
quest_info = {}
timer  ={}

function blankquest ()
  quest_info = {}
  quest_info.finishtime = -1
  quest_info.starttime = -1
  quest_info.mobname = ''
  quest_info.mobarea = ''
  quest_info.mobroom = ''
  quest_info.qp = 0
  quest_info.gold = 0
  quest_info.tier = 0
  quest_info.mccp = 0
  quest_info.lucky = 0
  quest_info.tp = 0
  quest_info.trains = 0
  quest_info.pracs = 0
  quest_info.failed = 0
end

function quest_available (name, line, wildcards)
  check(EnableTimer("questtimer", false))
  phelper:broadcast(1)
end -- quest_available

function quest_time_to_go (name, line, wildcards)
  local mins = tonumber (wildcards [1])
  if mins then
    when_required = os.time () + mins * 60
  end -- if
  update_timer()
end -- quest_time_to_go

function questor_time (minutes)

  when_required = os.time () + tonumber (minutes) * 60

  onquest = true
  update_timer()

end -- questor_end

function update_timer()
  -- how long to go
  if when_required == nil then
    return
  end
  check(EnableTimer("questtimer", true))
  local time_to_go = when_required - os.time ()
  timer['secs'] = time_to_go
  timer['text'] = convert_time(time_to_go)
  var.timer = serialize.save( "timer", timer )
  if onquest then
    phelper:broadcast(3, var.timer)
  else
    phelper:broadcast(7, var.timer)
  end
end


]]>
</script>

<script>
<![CDATA[

function OnPluginBroadcast (msg, id, name, text)
  phelper:OnPluginBroadcast(msg, id, name, text)

  if id == '3e7dedbe37e44942dd46d264' then
    if text:find("comm.quest") then
      res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","comm.quest")
      stuff = assert (loadstring ('return ' .. gmcparg or ""))()

      if stuff.action == 'ready' then
        phelper:broadcast(1)
        check(EnableTimer("questtimer", false))
      elseif stuff.action == 'start' then
        blankquest()
        quest_info['starttime'] = GetInfo(304)
        quest_info['mobname'] = stuff.targ
        quest_info['mobroom'] = stuff.room
        quest_info['mobarea'] = stuff.area
        var.quest_info = serialize.save( "quest_info", quest_info )
        phelper:broadcast(2, var.quest_info)
        questor_time (tonumber(stuff.timer))
      elseif stuff.action == 'killed' then
        check(EnableTimer("questtimer", false))
        phelper:broadcast(4)
      elseif stuff.action == 'comp' then
        quest_info['qp'] = stuff.qp
        quest_info['gold'] = stuff.gold
        quest_info['tier'] = stuff.tierqp
        quest_info['lucky'] = stuff.lucky
        quest_info['mccp'] = stuff.mccp
        quest_info['tp'] = stuff.tp
        quest_info['trains'] = stuff.trains
        quest_info['pracs'] = stuff.pracs
        quest_info['finishtime'] = GetInfo(304)
        quest_info['double'] = 0
        if quest_info['double'] == 1 then
          quest_info['double'] = stuff.qp
        end
        var.quest_info = serialize.save( "quest_info", quest_info )
        phelper:broadcast(6, var.quest_info)
        when_required = os.time () + (30 * 60)  -- 30 mins to go
        onquest = false
        update_timer()
      elseif stuff.action == 'fail' then
        when_required = os.time () + (stuff.wait * 60)  -- 15 mins to go
        onquest = false
        update_timer()
        quest_info.failed = 1
        quest_info['finishtime'] = GetInfo(304)
        var.quest_info = serialize.save( "quest_info", quest_info )
        phelper:broadcast(8, var.quest_info)
      elseif stuff.action == 'status' then
        if stuff.status == 'ready' then
          quest_available()
        else
          when_required = os.time() + (stuff.wait * 60)
          update_timer()
        end
      elseif stuff.action == 'reset' then
        when_required = os.time() + (stuff.timer * 60)
        update_timer()
      end
    end
  end
end

function OnPluginInstall ()
  --OnPluginEnable is automatically called by pluginhelper

  phelper:OnPluginInstall()
end -- OnPluginInstall

function OnPluginClose ()

  phelper:OnPluginClose()
end -- OnPluginClose

function OnPluginEnable ()
  ldplugin ("GMCP_handler")

  phelper:OnPluginEnable()
end -- OnPluginEnable

function OnPluginDisable ()

  phelper:OnPluginDisable()
end -- OnPluginDisable

function OnPluginConnect ()

  phelper:OnPluginConnect()
end -- function OnPluginConnect

function OnPluginDisconnect ()

  phelper:OnPluginDisconnect()
end -- function OnPluginConnect

function OnPluginSaveState ()

  phelper:OnPluginSaveState()
end -- function OnPluginSaveState

]]>
</script>

<script>
<![CDATA[

phelper:set_default('cmd', 'bqu')
phelper:set_default('plugin_colour', 'orange')

phelper:enable()

]]>
</script>
</muclient>
