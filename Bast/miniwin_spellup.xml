<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- $Id$ -->
<muclient>
<plugin
   name="miniwin_spellup"
   author="Bast"
   id="eeef0c555a44169e0f1d9674"
   language="Lua"
   purpose="spellup plugin with a miniwindow"
   date_written="2008-07-18"
   requires="4.52"
   version="6.0"
   save_state="y"
   >
<description trim="y">

TODO:
create miniwin based on mine
menu for each spell
 - show Help
 - showskill
 - Info
  - SN
  - stuff from slist
  
have tabs for:
 * Summary
   - how many good/bad/requested spells (can click good/bad/requested to go to good/bad/requested tab)
   - spells that are wearing off in less than one minute
   - recoveries
   - spells pending
   - disabled spells
 * Good
 * Bad
 * Requested - show blocked
 * Other
 
 * Combat - list both spells and skills that can be used in combat
 * Spellups - can click spells in this window to add them
    - columns for each - self, other
    - red can't add - (not practiced)
   
NOTES:

Spellup Other -
 put all at end (does all spellups)
 no all then does the ones you have picked from the spellups tab


</description>

</plugin>

<!--  Triggers  -->
<triggers>


</triggers>

<timers>
 <timer name="display_timer"
         enabled="n"
         second="5.00"
         script="spell_display_timer"
         active_closed="y"
         >
  </timer>
</timers>
<!--  Script  -->

<script>
<![CDATA[
internalrevision = "$Rev$"

dofile (GetPluginInfo (GetPluginID (), 20) .. "luapath.lua")

require 'var'
require 'pluginhelper'
require "tprint"
require "commas"
require "miniwin"
require "serialize"
require "ldplugin"
require "findfile"
require "verify"
require "tablefuncs"
require "bastspell"

spellwin = Miniwin:new{name="SpellUp"}
spellwin:set_default('maxlines', 30)
spellwin:set_default("maxtabs", 5)
spellwin:set_default("header_bg_colour", "black")
spellwin:add_setting("goodcolour", {help="the text colour for a good spell", type="colour", default=verify_colour("cornflowerblue"), sortlev=1, longname="The colour for the good spells"})
spellwin:add_setting("badcolour", {help="the text colour for when a bad spell", type="colour", default=verify_colour("firebrick"), sortlev=1, longname="The colour for the bad spells"})
spellwin:add_setting("pendingcolour", {help="the text colour for a pending spell", type="colour", default=verify_colour("yellow"), sortlev=1, longname="The colour for the pending spells"})
spellwin:add_setting("blockedcolour", {help="the text colour for a blocked spell", type="colour", default=verify_colour("seagreen"), sortlev=1, longname="The colour for the blocked spells"})
spellwin:add_setting("disabledcolour", {help="the text colour for a disabled spell", type="colour", default=verify_colour("orange"), sortlev=1, longname="The colour for the disabled spells"})
spellwin:add_setting("askedrecoverycolour", {help="the text colour for a recovery that affects an asked spell", type="colour", default=verify_colour("cyan"), sortlev=1, longname="The colour for the recoveries fo asked spells"})
spellwin:add_setting("recoverycolour", {help="the text colour for all recoveries", type="colour", default=verify_colour("lightseagreen"), sortlev=1, longname="The colour for a recovery"})
spellwin:add_setting("statuscolour", {help="the text colour for the status", type="colour", default=verify_colour("springgreen"), sortlev=1, longname="The colour for a recovery"})

good = {}
bad = {}

spells_filter = ""

status = "Unknown"

casting = ""
toremove = ""

askedself = nil
askedself_xref = {}
askedother = nil
askedother_xref = {}

selfstuff = {}
otherstuff = {}

spellcures = {}
spellcures[6] = {23}
spellcures[66] = {330, 27, 158}
spellcures[65] = {25, 158}
spellcures[237] = {238}
spellcures[29] = {70}
spellcures[115] = {332}

function buildmenu(item, menutype)
  menu = strip_colours(spells['all'][item].name) .. "|"
  menu = menu .. "| showskill"
  menu = menu .. "| bspell info"
  if spells['all'][412] and spells['all'][412].percent > 0 and spells['all'][item].percent > 1 then
    menu = menu .. "| disrupt"
  end
  if spellcures[item] then
    menu = menu .. "| >cure"
    for i,v in ipairs(spellcures[item]) do
      if spells['all'][v] and spells['all'][v].percent > 1 then
        menu = menu .. "| with : " .. spells['all'][v].name
      end
    end
    menu = menu .. '| <'    
  end
  if menutype == 'self' or menutype == 'other' then
    menu = menu .. "| Remove"
  end
  if menutype == 'spellup' and not askedself_xref[item] then
    menu = menu .. "| Add"
    menu = menu .. "| Add in Position"
  end
  return menu
end


function mouseleft(result, item, menutype)
  if result:match("showskill") then
    SendNoEcho("showskill " .. tostring(item))
  elseif result:match("bspell") then
    Execute("bspell info " .. tostring(item))
  elseif result:match("disrupt") then
    SendNoEcho("c disrupt " .. item)
  elseif result:match('Remove') then
    if menutype == 'self' then
      Execute("bspell sremove " .. item)
    elseif menutype == 'other' then
      Execute("bspell oremove " .. item)
    end
  elseif result:match('Add in Position') then
    pos = verify_number("", {low=1, high=#askedself + 1, msg="Add in position"})
    if pos then
      Execute("bspell sadd " .. item .. ":" .. pos)
    end      
  elseif result:match('Add') then
    if menutype == 'self' then
      Execute("bspell sadd " .. item)
    elseif menutype == 'other' then
      Execute("bspell oadd " .. item)    
    end
  elseif result:match("with") then
    local tresult = utils.split(result, ':')
    local spell = find_spell(trim(tresult[2]))
    if spell then      
      casting = spell.sn
      toremove = item
      if spell.type == 1 then
        SendNoEcho('cast ' .. tostring(spell.sn))
      else
        SendNoEcho(justWords(spell.name)[1])
      end
    else
      print('could not find cure result')
    end
  end
end

menus = {
 affectedmenuright = buildmenu,
 affectedmenuleft = buildmenu,
 affectedmouseright = mouseleft,
 affectedmouseleft = mouseleft,
 selfmenuright = buildmenu,
 selfmenuleft = buildmenu,
 selfmouseright = mouseleft,
 selfmouseleft = mouseleft, 
 othermenuright = buildmenu,
 othermenuleft = buildmenu,
 othermouseright = mouseleft,
 othermouseleft = mouseleft, 
 spellupmenuright = buildmenu,
 spellupmenuleft = buildmenu,
 spellupmouseright = mouseleft,
 spellupmouseleft = mouseleft, 
}

function menuclick(item, menutype)
  return function (win, flags, hotspot)
    local item = item
    local menutype = menutype
    local menu = ''
    local mousebutton = ''
    --make text for menu options
    -- right click for window menu, left click for plugin menu
    if bit.band(flags, 0x10) ~= 0 then
      -- left
      mousebutton = 'left'
    elseif bit.band(flags, 0x20) ~= 0 then
      -- right
      mousebutton = 'right'
    end
    menu = menus[menutype .. 'menu' .. mousebutton](item, menutype)
    local result = WindowMenu (spellwin.id, WindowInfo (spellwin.id, 14), WindowInfo (spellwin.id, 15), menu) --do menu
    if result:match(' - ') then
      local tresult = utils.split(result, '-')
      result = trim(tresult[1])
    end
    if result ~= "" then
      menus[menutype .. 'mouse' .. mousebutton](result, item, menutype)
    end
  end
end

function counttable(ttable)
  count = 0
  for i,v in pairs(ttable) do
    count = count + 1
  end
  return count
end

function make_askedself_xrefs ()
  phelper:mdebug('making askedself xref')
  askedself_xref = {}
  for k, v in pairs (askedself) do
    askedself_xref[v.sn] = k
  end -- for each spell
end -- make_xrefs

function make_askedother_xrefs ()
  phelper:mdebug('making askedother xref')
  askedother_xref = {}
  for k, v in pairs (askedother) do
    askedother_xref[v.sn] = k
  end -- for each spell
end -- make_xrefs

function onspellschange(args)
  askedself = assert (loadstring ('return ' .. args or ""))()
  make_askedself_xrefs()
  build_windows()
end

function onotherchange(args)
  askedother = assert (loadstring ('return ' .. args or ""))()
  make_askedother_xrefs()
  build_windows()
end


function onstatuschange(args)
  local targs = assert (loadstring ('return ' .. args or ""))()
  status = targs.status
  build_windows()
end

function build_windows(override)

  if askedself == nil and GetPluginInfo("aaaf0c555a44169e0f1d9674", 17) then    
    local ret, test = CallPlugin("aaaf0c555a44169e0f1d9674", "getaskedself") 
    askedself = assert (loadstring ('return ' .. test or ""))()
    make_askedself_xrefs()      
  end

  if askedother == nil and GetPluginInfo("aaaf0c555a44169e0f1d9674", 17) then    
    local ret, test2 = CallPlugin("aaaf0c555a44169e0f1d9674", "getaskedother") 
    askedother = assert (loadstring ('return ' .. test2 or ""))()
    make_askedother_xrefs()      
  end

  if spells['all'] and spells['affected'] and recoveries['affected'] and spells['spellup'] and spells['learned'] then

    good = {}
    bad = {}
    selfstuff['trecoveries'] = {}
    selfstuff['disabled'] = {}
    selfstuff['pending'] = {}
    selfstuff['blocked'] = {}
    selfstuff['noprac'] = {}
    selfstuff['nolearn'] = {}

    otherstuff['disabled'] = {}
    otherstuff['noprac'] = {}
    otherstuff['nolearn'] = {}

    for k, v in pairs (spells['affected']) do
      if v.target == 1 and spells['spellup'][k] == nil then
        table.insert (bad, { name = v.name, duration = v.finish - GetInfo(304), sn=k } )
      else
        table.insert (good, { name = v.name, duration = v.finish - GetInfo(304), sn=k} )
      end -- if
    end

    for _, v in ipairs (askedself) do
      local text = spells['all'][tonumber(v.sn)].name
      if recoveries['affected'][spells['all'][tonumber(v.sn)].recovery] then
        table.insert (selfstuff['trecoveries'], text)
      else
        if v.disabled then
          selfstuff['disabled'][v.sn] = spells['all'][v.sn]
        elseif spells['learned'][tonumber(v.sn)] == nil and spells['all'][tonumber(v.sn)].percent == 1 then
          selfstuff['noprac'][v.sn] = spells['all'][v.sn]
        elseif spells['learned'][tonumber(v.sn)] == nil and spells['all'][tonumber(v.sn)].percent == 0 then
          selfstuff['nolearn'][v.sn] = spells['all'][v.sn]
        else
          if v.blockers then
            for blocker, _ in pairs(v.blockers) do
              if not spells['affected'][tonumber(v.sn)] and spells['affected'][blocker] then
                text = text.." (Blocked)"
                selfstuff['blocked'][v.sn] = spells['all'][v.sn]
              end
            end
          end
          if not spells['affected'][tonumber(v.sn)] and not isblocked and spells['all'][tonumber(v.sn)].percent > 1 then
            selfstuff['pending'][v.sn] = spells['all'][v.sn]
          end         
        end -- disabled
      end -- if
    end -- for

    for _, v in ipairs (askedother) do
      local text = spells['all'][tonumber(v.sn)].name
      if v.disabled then
        otherstuff['disabled'][v.sn] = spells['all'][v.sn]
      elseif spells['learned'][tonumber(v.sn)] == nil and spells['all'][tonumber(v.sn)].percent == 1 then
        otherstuff['noprac'][v.sn] = spells['all'][v.sn]
      elseif spells['learned'][tonumber(v.sn)] == nil and spells['all'][tonumber(v.sn)].percent == 0 then
        otherstuff['nolearn'][v.sn] = spells['all'][v.sn]
      end -- disabled
    end -- for

    for i,v in tableSort(windowtabs, "sort") do
      if not spellwin:hastab(i) or override then
        v.func()
      end
    end
    
    if windowtabs[spellwin.activetab.tabname] then
      windowtabs[spellwin.activetab.tabname].func()
    end
    
    if not GetTimerInfo ("display_timer", 6) then
      EnableTimer("display_timer", true)
    end  
    
  end
end

function format_requested_line(column, tself, tother, colour)
  local lstyle = {}
  local style = {}
  style.text = string.format("%-15s: ", column)
  style.textcolour = colour
  table.insert(lstyle, style)
  
  local style = {}
  style.text = string.format("%4s %8s", tostring(tself), " ")
  style.textcolour = colour
  style.mouseup = function ()
            spellwin:changetotab('Self')
         end  
  table.insert(lstyle, style)
  
  local style = {}
  style.text = string.format("%4s", tostring(tother), " ")
  style.textcolour = colour
  style.mouseup = function ()
            spellwin:changetotab('Other')
         end  
  table.insert(lstyle, style)  
  return lstyle

end

function build_summary()
  --print('build_summary')
  local alines = {}
  
  local style = {}
  style.text = "-------------------------------------------"
  table.insert(alines, {style})
  
  local lstyle = {}
  local style = {}
  style.text = "Status: " .. tostring(status)
  style.hjust = 'center'
  style.textcolour = "statuscolour"
  table.insert(lstyle, style)
  
  local style = {}
  style.text = "Add "
  style.hjust = 'right'
  style.textcolour = "white"
  style.mouseup = function ()
            spellwin:changetotab('Spells')
         end
  table.insert(lstyle, style)
  
  table.insert(alines, lstyle)
  
  local style = {}
  style.text = "-------------------------------------------"
  table.insert(alines, {style})
  
  local lstyle = {}
  local style = {}
  style.text = string.format("%-15s: %3d  " , "Good", #good)
  style.textcolour = "goodcolour"
  style.mouseup = function ()
            spellwin:changetotab('Affected')
         end
  table.insert(lstyle, style)

  local style = {}
  style.text = string.format("%-15s: %3d", "Recoveries", #selfstuff['trecoveries'])
  style.textcolour = "askedrecoverycolour"
  style.mouseup = function ()
            spellwin:changetotab('Affected')
         end
  table.insert(lstyle, style)
  table.insert(alines, lstyle)

  local lstyle = {}
  local style = {}
  style.text = string.format("%-15s: %3d  " , "Bad", #bad)
  style.textcolour = "badcolour"
  style.mouseup = function ()
            spellwin:changetotab('Affected')
         end
  table.insert(lstyle, style)

  local style = {}
  style.text = string.format("%-15s: %3d", "All Recoveries", counttable(recoveries['affected']))
  style.textcolour = "recoverycolour"
  style.mouseup = function ()
            spellwin:changetotab('Affected')
         end
  table.insert(lstyle, style)       
  table.insert(alines, lstyle)

  local style = {}
  style.text = "-------------------------------------------"
  table.insert(alines, {style})

  local lstyle = {}
  local style = {}
  style.text = string.format("%-15s  %5s %7s %5s" , " ", "Self", " ", "Other")
  table.insert(lstyle, style)  
  table.insert(alines, lstyle)
  
  table.insert(alines, format_requested_line("Can Cast", 
                                              #askedself 
                                                - tableCountItems(selfstuff['noprac']) 
                                                - tableCountItems(selfstuff['nolearn']) 
                                                - tableCountItems(selfstuff['disabled']), 
                                              #askedother 
                                                - tableCountItems(otherstuff['noprac'])
                                                - tableCountItems(otherstuff['nolearn']) 
                                                - tableCountItems(otherstuff['disabled']), 
                                              "lime"))

  table.insert(alines, format_requested_line("Requested", #askedself, 
                                         #askedother, "green"))

  table.insert(alines, format_requested_line("Pending", tableCountItems(selfstuff['pending']), 
                                         " ", "pendingcolour"))

  if tableCountItems(selfstuff['blocked']) > 0 then
    table.insert(alines, format_requested_line("Blocked", tableCountItems(selfstuff['blocked']), 
                                         " ", "blockedcolour"))
  end

  -- add an or for otherdisabled > 0
  if tableCountItems(selfstuff['disabled']) > 0 or tableCountItems(otherstuff['disabled']) > 0 then
    table.insert(alines, format_requested_line("Disabled", tableCountItems(selfstuff['disabled']), 
                                         tableCountItems(otherstuff['disabled']), "disabledcolour"))
  end

  -- add an or for othernoprac > 0
  if tableCountItems(selfstuff['noprac']) > 0 or tableCountItems(otherstuff['noprac']) > 0 then
    table.insert(alines, format_requested_line("Not Practiced", tableCountItems(selfstuff['noprac']), 
                                         tableCountItems(otherstuff['noprac']), "disabledcolour"))
  end

  -- add an or for othernolearn > 0
  if tableCountItems(selfstuff['nolearn']) > 0 or tableCountItems(otherstuff['nolearn']) > 0 then
    table.insert(alines, format_requested_line("Not Learned", tableCountItems(selfstuff['nolearn']), 
                                        tableCountItems(otherstuff['nolearn']), "disabledcolour"))
  end

  spellwin:enable()
  spellwin:addtab('Summary', alines, nil, false, true, 1)
end

function time_colour(time_to_go)
  if time_to_go == nil then
    return "red"
  elseif time_to_go >= 180 then
    return "lime"
  elseif time_to_go >= 60 then
    return "yellow"
  else
    return "deeppink"
  end -- if
end

function print_affected(atable, name, colour)
  local alines = {}
  local style = {}
  style.text = name .. ": " .. tostring(tableCountItems(atable))
  style.textcolour = colour
  style.hjust = 'center'
  table.insert(alines, {style})

  if next(atable) then
    table.insert(alines, {{text = '-------------------------------------------', textcolour = "white"}})    
    for i,v in tableSort(atable, "duration") do
      local lstyle = {}
      local style = {}
      style.text = string.format("%-30s : ", v.name)
      style.mouseup = menuclick(v.sn, 'affected')
      style.textcolour = colour
      table.insert(lstyle, style)

      local style = {}
      style.text = SecondsToClock (v.duration)
      style.textcolour = time_colour(v.duration)
      style.mouseup = menuclick(v.sn, 'affected')
      table.insert(lstyle, style)
      
      table.insert(alines, lstyle)
    end
  end
  local style = {}
  style.text = "  "
  style.textcolour = colour
  table.insert(alines, {style}) 

  return alines
end

function build_affected()
  --print('build_affected')
  local alines = {}

  if #bad > 0 then
    tableExtend(alines, print_affected(bad, "Bad", "badcolour"))   
  end
  
  recoverycount = counttable(recoveries['affected'])
  if recoverycount > 0 then
    tableExtend(alines, print_affected(recoveries['affected'], "Recoveries", "recoverycolour"))
  end

  tableExtend(alines, print_affected(good, "Good", "goodcolour"))
  
  spellwin:enable()
  spellwin:addtab('Affected', alines, nil, false, true)  
end

function build_self()
  --print('build_self')

  local hlines = {}
  local alines = {}   

  local style = {}
  style.text =  "Requested : " .. tostring(tableCountItems(askedself))
  style.textcolour = "green"
  style.hjust = 'center'
  table.insert(hlines, {style})
  
  local lstyle = {}
  local style = {}
  style.text =  string.format("%-31s : ", "#   - Name") 
  style.textcolour = "green"
  table.insert(lstyle, style)

  local style = {}
  style.text =  string.format("%-3s", " P ") 
  style.textcolour = "pendingcolour"
  style.hint = "Pending"
  style.mouseover = nofunc
  table.insert(lstyle, style)

  local style = {}
  style.text =  string.format("%-3s", " B ") 
  style.textcolour = "blockedcolour"
  style.hint = "Blocked"
  style.mouseover = nofunc
  table.insert(lstyle, style)

  local style = {}
  style.text =  string.format("%-3s", " D ") 
  style.textcolour = "disabledcolour"
  style.hint = "Disabled"
  style.mouseover = nofunc
  table.insert(lstyle, style)

  local style = {}
  style.text =  string.format("%-4s", " NP ") 
  style.textcolour = "disabledcolour"
  style.hint = "Not Practiced"
  style.mouseover = nofunc
  table.insert(lstyle, style)

  local style = {}
  style.text =  string.format("%-4s", " NL ") 
  style.hint = "Not Learned"
  style.textcolour = "disabledcolour"
  style.mouseover = nofunc
  table.insert(lstyle, style)

  table.insert(hlines, lstyle)
  table.insert(hlines, {{text = '---------------------------------------------------', textcolour = "white"}})   
  
  if #askedself == 0 then
    table.insert(alines, {{text = 'None', hjust='center', textcolour='white'}})
  else
    for i,v in ipairs(askedself) do
      local lstyle = {}
      local style = {}
      style.text = string.format("%-3s - %-25s : ", i, spells['all'][v.sn].name)
      style.mouseup = menuclick(v.sn, 'self')
      style.textcolour = "green"
      table.insert(lstyle, style)  
      
      local style = {}
      style.textcolour = "pendingcolour"
      style.cellborder = true
      if selfstuff['pending'][v.sn] then
        style.text = string.format("%-3s", " P ")
      else
        style.text = string.format("%-3s", "   ")
      end
      table.insert(lstyle, style)  

      local style = {}
      style.textcolour = "blockedcolour"
      style.cellborder = true
      if selfstuff['blocked'][v.sn] then
        style.text = string.format("%-3s", " B ")
      else
        style.text = string.format("%-3s", "   ")
      end
      table.insert(lstyle, style)  

      local style = {}
      style.textcolour = "disabledcolour"
      style.cellborder = true
      if selfstuff['disabled'][v.sn] then
        style.text = string.format("%-3s", " D ")
        style.mouseup = function ()
              Execute("bspell senable " .. v.sn)
          end
      else
        style.text = string.format("%-3s", "   ")
        style.mouseup = function ()
              Execute("bspell sdisable " .. v.sn)
          end
      end
      table.insert(lstyle, style)  

      local style = {}
      style.textcolour = "disabledcolour"
      style.cellborder = true
      if selfstuff['noprac'][v.sn] then
        style.text = string.format("%-4s", " NP ")
      else
        style.text = string.format("%-4s", "    ")
      end
      table.insert(lstyle, style)  

      local style = {}
      style.textcolour = "disabledcolour"
      style.cellborder = true
      if selfstuff['nolearn'][v.sn] then
        style.text = string.format("%-4s", " NL ")
      else
        style.text = string.format("%-4s", "    ")
      end
      table.insert(lstyle, style)  
      table.insert(alines, lstyle)
    end
  end
  
  spellwin:enable()
  spellwin:addtab('Self', alines, hlines, false, true)  
end

function build_other()
  --print('build_self')

  local hlines = {}
  local alines = {}   

  local style = {}
  style.text =  "Requested : " .. tostring(tableCountItems(askedother))
  style.textcolour = "green"
  style.hjust = 'center'
  table.insert(hlines, {style})
  
  local lstyle = {}
  local style = {}
  style.text =  string.format("%-31s : ", "#   - Name") 
  style.textcolour = "green"
  table.insert(lstyle, style)

  local style = {}
  style.text =  string.format("%-3s", " D ") 
  style.textcolour = "disabledcolour"
  style.hint = "Disabled"
  style.mouseover = nofunc
  table.insert(lstyle, style)

  local style = {}
  style.text =  string.format("%-4s", " NP ") 
  style.textcolour = "disabledcolour"
  style.hint = "Not Practiced"
  style.mouseover = nofunc
  table.insert(lstyle, style)

  local style = {}
  style.text =  string.format("%-4s", " NL ") 
  style.hint = "Not Learned"
  style.textcolour = "disabledcolour"
  style.mouseover = nofunc
  table.insert(lstyle, style)

  table.insert(hlines, lstyle)
  table.insert(hlines, {{text = '---------------------------------------------------', textcolour = "white"}})   
  
  if #askedother == 0 then
    table.insert(alines, {{text = 'None', hjust='center', textcolour='white'}})
  else
    for i,v in ipairs(askedother) do
      local lstyle = {}
      local style = {}
      style.text = string.format("%-3s - %-25s : ", i, spells['all'][v.sn].name)
      style.mouseup = menuclick(v.sn, 'other')
      style.textcolour = "green"
      table.insert(lstyle, style)  
      
      local style = {}
      style.textcolour = "disabledcolour"
      style.cellborder = true
      if otherstuff['disabled'][v.sn] then
        style.text = string.format("%-3s", " D ")
        style.mouseup = function ()
              Execute("bspell oenable " .. v.sn)
          end
      else
        style.text = string.format("%-3s", "   ")
        style.mouseup = function ()
              Execute("bspell odisable " .. v.sn)
          end
      end
      table.insert(lstyle, style)  

      local style = {}
      style.textcolour = "disabledcolour"
      style.cellborder = true
      if otherstuff['noprac'][v.sn] then
        style.text = string.format("%-4s", " NP ")
      else
        style.text = string.format("%-4s", "    ")
      end
      table.insert(lstyle, style)  

      local style = {}
      style.textcolour = "disabledcolour"
      style.cellborder = true
      if otherstuff['nolearn'][v.sn] then
        style.text = string.format("%-4s", " NL ")
      else
        style.text = string.format("%-4s", "    ")
      end
      table.insert(lstyle, style)  
      table.insert(alines, lstyle)
    end
  end
  
  spellwin:enable()
  spellwin:addtab('Other', alines, hlines, false, true)  
end


function build_spells()
  --print('build_spells')
  local hlines = {}   
  local alines = {}
  
  local lstyle = {}
  local style = {}
  style.text =  string.format("%-31s : ", "SN  - Name") 
  style.textcolour = "green"
  table.insert(lstyle, style)

  local style = {}
  style.text =  string.format("%-3s", " R ") 
  style.textcolour = "green"
  style.hint = "Requested"
  style.mouseover = nofunc
  table.insert(lstyle, style)
  
  local style = {}
  style.text =  string.format("%-3s", " S ") 
  style.textcolour = "yellow"
  style.hint = "Mud Spellup"
  style.mouseover = nofunc
  table.insert(lstyle, style)  

  local style = {}
  style.text =  string.format("%-3s", " C ") 
  style.textcolour = "yellow"
  style.hint = "Clientside Spellup"
  style.mouseover = nofunc
  table.insert(lstyle, style)  

  local style = {}
  style.text =  string.format("%-4s", " RO ") 
  style.textcolour = "orange"
  style.hint = "Requested for Casting on Others"
  style.mouseover = nofunc
  table.insert(lstyle, style)

  local style = {}
  style.text =  string.format("%-4s", " AO ") 
  style.textcolour = "orange"
  style.hint = "Casted on others if 'fast' is used"
  style.mouseover = nofunc
  table.insert(lstyle, style)

  table.insert(hlines, lstyle)
  table.insert(hlines, {{text = '---------------------------------------------------', textcolour = "white"}})    
  
  for i,v in tableSort(spells['all'], "spellup", 0, true) do
    if v.target == 2 or v.target == 3 then
      local lstyle = {}
      local style = {}
      style.text = string.format("%-3s - %-25s : ", tostring(v.sn), spells['all'][v.sn].name)
      style.mouseup = menuclick(v.sn, 'spellup')
      style.textcolour = "green"
      table.insert(lstyle, style)  
      
      local style = {}
      style.textcolour = "green"
      style.cellborder = true
      if askedself_xref[v.sn] then
        style.text = string.format("%-3s", " R ")
        style.mouseup = function ()
            Execute("bspell sremove " .. v.sn)
         end        
      else
        style.text = string.format("%-3s", "   ")
        if v.spellup or v.clientspellup then
          style.mouseup = function ()
            Execute("bspell sadd " .. v.sn)
          end        
        end
      end
      table.insert(lstyle, style)  

      local style = {}
      style.textcolour = "yellow"
      style.cellborder = true
      if old_spellup and old_spellup[v.sn] and not spells['spellup'][v.sn] then
        print('----spellup changed----')
        print(old_spellup[v.sn].name, 'changed from spellup to no spellup')
        print('----------------------------')
      end
      if spells['spellup'][v.sn] and spells['spellup'][v.sn].spellup == 1 then
        style.text = string.format("%-3s", " S ")
      else
        style.text = string.format("%-3s", "   ")
      end
      table.insert(lstyle, style)  

      local style = {}
      style.textcolour = "yellow"
      style.cellborder = true
      
      local sp = spells['spellup'][v.sn]
   
      if sp and sp.clientspellup == 1 then
        style.text = string.format("%-3s", " C ")
        style.mouseup = function ()
          Execute("bspell togglespellup " .. v.sn)
        end          
      else
        style.text = string.format("%-3s", "   ")
        if not sp or (sp and sp.spellup ~= 1) then
          style.mouseup = function ()
            Execute("bspell togglespellup " .. v.sn)
          end          
        end
      end
      table.insert(lstyle, style)  

      local style = {}
      style.textcolour = "orange"
      style.cellborder = true
      if askedother_xref[v.sn] then
        style.text = string.format("%-4s", " RO ")
        style.mouseup = function ()
          Execute("bspell oremove " .. v.sn)
        end        
      else
        style.text = string.format("%-4s", "   ")
        if cancastother(v.sn) then
          style.mouseup = function ()
            Execute("bspell oadd " .. v.sn)
          end        
        end
      end
      table.insert(lstyle, style)  

      local style = {}
      style.textcolour = "orange"
      style.cellborder = true
      if cancastother(v.sn) and spells['learned'][v.sn] ~= nil then
        style.text = string.format("%-4s", " AO ")
      else
        style.text = string.format("%-4s", "   ")
      end
      table.insert(lstyle, style)  


      table.insert(alines, lstyle)
    end
  end
  
  spellwin:enable()
  spellwin:addtab('Spells', alines, hlines, false, true)  
end

function build_combat()
  print('building combat')
end

function spell_display_timer()
  good = {}
  bad = {}  

  for k, v in pairs (spells['affected']) do
    if v.target == 1 and spells['spellup'][k] == nil then
      table.insert (bad, { name = v.name, duration = v.finish - GetInfo(304), sn=k } )
    else
      table.insert (good, { name = v.name, duration = v.finish - GetInfo(304), sn=k} )
    end -- if
  end
  
  for k,v in pairs(recoveries['affected']) do
    v.duration = v.finish - GetInfo(304)
  end

  if spellwin.activetab.tabname == 'Affected' then
    build_affected()
  end

end

windowtabs = {
 Summary = {func=build_summary, sort=1},
 Affected = {func=build_affected, sort=2},
 Self = {func=build_self, sort=3},
 Other = {func=build_other, sort=4},
 Spells = {func=build_spells, sort=5},
}

function settimer()
  local minutes = 0
  local seconds = 0
  numb = tonumber(var.refreshrate)
  if numb > 59 then
    minutes = math.floor(numb/60)
    seconds = numb - (hours * 60)
  else
    seconds = numb
  end
  if minutes > 0 then
    SetTimerOption ("display_timer", "minute", minutes)
  else
    SetTimerOption ("display_timer", "minute", 0)
  end
  if seconds > 0 then
    SetTimerOption ("display_timer", "second", seconds)
  else
    SetTimerOption ("display_timer", "second", 0)
  end
end

function ontabchange(object, args)
 if args.newtab == 'Summary' then
   object.showtabline = false
 else
   object.showtabline = true 
 end
 build_windows()
end

function onbgcolourchange(object, args)
  spellwin:set('header_bg_colour', args.value)
end

spellwin:addevent('tabchange', spellwin, ontabchange)
spellwin:addevent('option_bg_colour', spellwin, onbgcolourchange)

function cmd_refresh(cmddict)
    if GetPluginInfo("aaaf0c555a44169e0f1d9674", 17) then    
      local ret, status = CallPlugin("aaaf0c555a44169e0f1d9674", "cmd_refresh") 
    end
end

function fixevents(rtype)
    local action = "registerevent"
    if rtype == "unregister" then
      action = "unregisterevent"
    end
    CallPlugin("aaaf0c555a44169e0f1d9674", action, GetPluginID(), "askedself_change", "onspellschange")   
    CallPlugin("aaaf0c555a44169e0f1d9674", action, GetPluginID(), "askedother_change", "onotherchange")    
    CallPlugin("aaaf0c555a44169e0f1d9674", action, GetPluginID(), "status_change", "onstatuschange")   
end

]]>
</script>

<script>
<![CDATA[

function OnPluginBroadcast (msg, id, name, text)
  phelper:OnPluginBroadcast(msg, id, name, text)
  
  if id == "aaaf0c555a44169e0f1d9674" and msg == -2 then
    fixevents("register")
  elseif id == 'aaa72f3b5453567e2bba9d50' then
    if msg == 7 then          
      -- slist all    
      load_spells('all')
      build_windows()
      
    elseif msg == 8 then  
      load_spells('learned')
      build_windows()
      
    elseif msg == 9 then  
      old_spellup = spells['spellup']
      load_spells('spellup', true)
      build_windows(true)
      
    elseif msg == 10 then          
      -- slist affected
      spells['affected'] = assert (loadstring ('return ' .. text or ""))()
      build_windows()
    elseif msg == 11 then          
      -- recoveries all
      load_recoveries("all")

    elseif msg == 12 then          
      -- recoveries affected
      recoveries['affected'] = assert (loadstring ('return ' .. text or ""))()
      build_windows()
    end  
  end
  
end

function OnPluginInstall ()
  --OnPluginEnable is automatically called by pluginhelper

  phelper:OnPluginInstall()
end -- OnPluginInstall

function OnPluginClose ()
  --OnPluginDisable is automatically called by pluginhelper

  phelper:OnPluginClose()
end -- OnPluginClose

function OnPluginEnable ()
  phelper:OnPluginEnable()
  
  ldplugin ("broadcast_spellsskills", "aaa72f3b5453567e2bba9d50")
  ldplugin ("bast_spellup", "aaaf0c555a44169e0f1d9674")

  fixevents("register")  
    
  if IsConnected() then
    if GetPluginInfo("aaaf0c555a44169e0f1d9674", 17) then    
      local ret = 0
      ret, status = CallPlugin("aaaf0c555a44169e0f1d9674", "getstatus") 
      local ret, test = CallPlugin("aaaf0c555a44169e0f1d9674", "getaskedself") 
      askedself = assert (loadstring ('return ' .. test or ""))()
      local ret, test2 = CallPlugin("aaaf0c555a44169e0f1d9674", "getaskedother") 
      askedother = assert (loadstring ('return ' .. test2 or ""))()
      make_askedself_xrefs()      
      make_askedother_xrefs()      
    end
    load_spells("all")
    load_spells("affected")
    load_spells("spellup", true)
    load_spells("learned")
    load_recoveries("all")
    load_recoveries("affected")
    build_windows()
  
  end

end -- OnPluginEnable

function OnPluginDisable ()
  fixevents("unregister")
  
  phelper:OnPluginDisable()
end -- OnPluginDisable

function OnPluginConnect ()
    
  phelper:OnPluginConnect()
end -- function OnPluginConnect

function OnPluginDisconnect ()

  phelper:OnPluginDisconnect()
end -- function OnPluginConnect

function OnPluginSaveState ()

  phelper:OnPluginSaveState()
end -- function OnPluginSaveState

]]>
</script>

<script>
<![CDATA[

phelper:set_default('cmd', 'mspell')
phelper:set_default('plugin_colour', 'lime')

phelper:add_setting('refreshrate', {help="the number of seconds between window updates", type="number", after=settimer, default=5, longname="Refresh Window Rate"})

phelper:add_cmd('refresh', {func=cmd_refresh, help="refresh affected spells"})
spellwin:add_cmd('refresh', {func=cmd_refresh, help="refresh affected spells"})

phelper:add_pobject('spellup', spellwin)

phelper:enable()

--phelper:addaardhelps{"Map", "Automap", "Maprun", "Maptags", "Speedwalks", "Academy-Geography"}
--phelper:addaardcmds{"map", "automap", "maprun", "tags", "runto"}

]]>
</script>
</muclient>
