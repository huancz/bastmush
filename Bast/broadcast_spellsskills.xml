<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- $Id$ -->
<muclient>
<plugin
   name="xBroadcast_SpellSkills"
   author="Bast"
   id="aaa72f3b5453567e2bba9d50"
   language="Lua"
   purpose="broadcast spell tags"
   save_state="y"
   date_written="2009-02-23 16:17:40"
   requires="4.38"
   version="6.0"
   >
<description trim="y">
<![CDATA[
broadcast spell tags
  
change only to broadcast affected when get a stag
  
]]>
</description>
</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>
<triggers>
<!-- spellheaders -->
 <trigger
   enabled="y"
   regexp="y"
   match="^{spellheaders\s*(.*)\s*noprompt}$"
   script="spellheaders_redirect"
   omit_from_output="y"
   name="start_spellheaders"
   sequence="100"
  >
  </trigger>

  <trigger
   enabled="n"
   match="*"
   script="spellheaders_redirect"
   name="multi_line_spellheaders"
   omit_from_output="y"
   sequence="10"
  >
  </trigger>
  
<!-- recoveries -->
  <trigger
   enabled="y"
   regexp="y"   
   match="^{recoveries\s*(.*)\s*noprompt}$"
   script="recoveries_redirect"
   omit_from_output="y"
   name="start_recoveries"
   sequence="100"
  >
  </trigger>

  <trigger
   enabled="n"
   match="*"
   script="recoveries_redirect"
   name="multi_line_recoveries"
   omit_from_output="y"
   sequence="10"
  >
  </trigger>
  
<!--  {affon}  -->
  <trigger
   name="affon"
   enabled="y"
   omit_from_output="y"
   match="^\{affon\}(?&lt;sn&gt;\d+)\,(?&lt;time&gt;\d+)$"
   script="spelltag_on"
   regexp="y"
   sequence="100"
  >
  </trigger>

  <trigger
   name="affoff"
   enabled="y"
   omit_from_output="y"
   match="^\{affoff\}(?&lt;sn&gt;\d+)$"
   script="spelltag_off"
   regexp="y"
   sequence="100"
  >
  </trigger>

<!--  {recon}  -->
 <trigger
   name="recon"
   enabled="y"
   omit_from_output="y"
   match="^\{recon\}(?&lt;sn&gt;\d+)\,(?&lt;time&gt;\d+)$"
   script="spelltag_on"
   regexp="y"
   sequence="100"
  >
  </trigger>

  <trigger
   name="recoff"
   enabled="y"
   omit_from_output="y"
   match="^\{recoff\}(?&lt;sn&gt;\d+)$"
   script="spelltag_off"
   regexp="y"
   sequence="100"
  >
  </trigger>

  <trigger
   enabled="y"
   omit_from_output="y"
   match="^\{sfail\}(?&lt;sn&gt;\-?\d+)\,(?&lt;target&gt;\d+)\,(?&lt;reason&gt;\d+)\,(?&lt;recovery&gt;\-?\d+)$"
   script="spell_failure"
   regexp="y"
   sequence="100"
  >
  </trigger>  
  
 <trigger
   enabled="y"
   omit_from_output="y"
   match="^\{skillgain\}(?&lt;sn&gt;\d+)\,(?&lt;percent&gt;\d+)$"
   script="skillgain"
   regexp="y"
   sequence="100"
  >
  </trigger>
 
</triggers>

<script>
<![CDATA[
internalrevision = "$Rev$"

dofile (GetPluginInfo (GetPluginID (), 20) .. "luapath.lua")

require "findfile"
require "var"
require "serialize"
require "commas"
require "pluginhelper"
require "copytable"
require "ldplugin"
require "chardb"
require "tablefuncs"

db = Statdb:new{}

nfile = scan_dir_for_file (GetInfo(60), "telnet_options.lua")
if nfile then
  -- pull in telnet option handling
  dofile (nfile)
else
  print("Could not load telnet_options.lua, please copy it to your plugin directory")
end

wasdisconnected = false
spells = {}
spells['affected'] = {}
recoveries = {}
recoveries['affected'] = {}
slisttype = ""
spells_count = 0

state = -1

function setclientspellup(spells)
  local tspells = assert (loadstring ('return ' .. spells or ""))()  
  for i,v in pairs(tspells) do
    tspells[i].clientspellup = 1
  end
  db:updateclientspellups(tspells)
  local bcastnum = sbroadcast_table['spellup']
  phelper:broadcast(bcastnum)
end

function unsetclientspellup(spells)
  local tspells = assert (loadstring ('return ' .. spells or ""))()  
  for i,v in pairs(tspells) do
    tspells[i].clientspellup = 0
  end
  db:updateclientspellups(tspells)
  local bcastnum = sbroadcast_table['spellup']
  phelper:broadcast(bcastnum)
end


function spelltag_on (name, line, wildcards)
  local spelltag = {}

  spelltag.sn = tonumber (wildcards.sn)
  spelltag.duration = tonumber (wildcards.time)
  spelltags = serialize.save_simple( spelltag )
  local bcastnum = -1
  if name == 'affon' then
    spells['affected'][tonumber(spelltag.sn)] = copytable.shallow(spells['all'][tonumber(spelltag.sn)])
    spells['affected'][tonumber(spelltag.sn)].duration = tonumber(spelltag.duration)
    spells['affected'][tonumber(spelltag.sn)].finish = GetInfo(304) + tonumber(spelltag.duration)
    bcastnum = sbroadcast_table['affected']
    local sliststr = serialize.save_simple( spells['affected'] )
    phelper:broadcast(bcastnum, sliststr, sliststr)     
    bcastnum = 1
  elseif name == 'recon' then
    recoveries['affected'][tonumber(spelltag.sn)] = copytable.shallow(recoveries['all'][tonumber(spelltag.sn)])
    recoveries['affected'][tonumber(spelltag.sn)].duration = tonumber(spelltag.duration)    
    recoveries['affected'][tonumber(spelltag.sn)].finish = GetInfo(304) + tonumber(spelltag.duration)
    bcastnum = rbroadcast_table['affected']
    local sliststr = serialize.save_simple( recoveries['affected'] )
    phelper:broadcast(bcastnum, sliststr, sliststr)     
    bcastnum = 3
  end
 
  
  phelper:broadcast(bcastnum, spelltags, spelltags)

end -- spelltag_on

function spelltag_off (name, line, wildcards)
  local spelltag = {}

  spelltag.sn = tonumber (wildcards.sn)
  spelltags = serialize.save_simple( spelltag )
  local bcastnum = -1
  if name == 'affoff' then
    spells['affected'][tonumber(spelltag.sn)] = nil
    bcastnum = sbroadcast_table['affected']
    local sliststr = serialize.save_simple( spells['affected'] )
    phelper:broadcast(bcastnum, sliststr, sliststr)  
    bcastnum = 2
    
  elseif name == 'recoff' then
    recoveries['affected'][tonumber(spelltag.sn)] = nil
    bcastnum = rbroadcast_table['affected']
    local sliststr = serialize.save_simple( recoveries['affected'] )
    phelper:broadcast(bcastnum, sliststr, sliststr)     
    bcastnum = 4
  end
  phelper:broadcast(bcastnum, spelltags, spelltags)
  

  
end -- spelltag_off

function spell_failure (name, line, wildcards)
  local sfail = {}
  sfail.sn = tonumber (wildcards.sn)
  sfail.target = tonumber (wildcards.target)
  sfail.reason = tonumber (wildcards.reason)
  sfail.recovery = tonumber (wildcards.recovery)

  sfails = serialize.save_simple( sfail )

  phelper:broadcast(5, sfails, sfails)
end

function request_slist()
   --print("called request slist")
   SendNoEcho("slist noprompt")
   SendNoEcho("slist spellup noprompt")
   --SendNoEcho("slist affected noprompt")
end

function request(stype)
  SendNoEcho("slist " .. stype .. " noprompt")
end

sbroadcast_table = {
  all=7,
  learned=8,
  spellup=9,
  affected=10,
}

rbroadcast_table = {
  all=11,
  affected=12,
}

function broadcast_slist(slisttype)
    local bcastnum = sbroadcast_table[slisttype]
    if slisttype == 'affected' then
      local sliststr = serialize.save_simple( spells[slisttype] )
      phelper:broadcast(bcastnum, sliststr, sliststr)
    else
      phelper:broadcast(bcastnum)
    end      
end

function broadcast_recovery(slisttype)
    local bcastnum = rbroadcast_table[slisttype]
    if slisttype == 'affected' then
      local sliststr = serialize.save_simple( recoveries[slisttype] )
      phelper:broadcast(bcastnum, sliststr, sliststr)
    else
      phelper:broadcast(bcastnum)
    end      
end

function skillgain (name, line, wildcards)
  local sn = tonumber (wildcards.sn)
  local percent = tonumber (wildcards.percent)

  if not spells['all'][sn] then
    request_slist()
  else
    spells ['all'][sn].percent = percent
    local tspell = {}
    tspell[sn] = spells['all'][sn]
    db:updateskills(tspell)
    broadcast_slist('learned')
  end
    
end -- skillgain

-- parse spellheaders line, break into pieces
function parse_spell_line (line)
  local sn, name, target, duration, percent, recovery, skilltype =
    string.match (line, "^(%d+)%,([A-Za-z0-9 ]+)%,(%d+)%,(%d+)%,(%d+),(-?%d+),(%d+)$")
  if not sn then
    ColourNote ("white", "red", "Invalid spellheaders line: " .. line)
    return nil
  end -- not a valid spell name

  return tonumber (sn),
         trim (name:lower()),
         tonumber (target),
         tonumber (duration),
         tonumber (percent),
         tonumber (recovery),
         tonumber (skilltype)

end -- parse_spell_line

-- spells redirector
function spellheaders_redirect (name, line, wildcards, styles)

  -- start of spells list? remove old ones
  if name == "start_spellheaders" then
    if trim(wildcards[1]) == "" then
      slisttype = "all"
      spells['affected'] = {}
      spells['learned'] = {}
    else
      slisttype = trim(wildcards[1])
    end
    spells[slisttype] = {}    
    spells_count = 0
    start = GetInfo(304)
    EnableTrigger ("multi_line_spellheaders", true)  -- capture subsequent lines
    return
  end -- if

  if line == "{/spellheaders}" then
    EnableTrigger ("multi_line_spellheaders", false)  -- no more lines to go
    --ColourNote ("green", "", "Loaded information about " .. spells_count .. " " .. slisttype .. " spells.")
    
    if slisttype == 'spellup' then
      db:updatespellup(spells['spellup'])
    end
    
    if slisttype == 'all' then
      db:updateskills(spells['all'])
      broadcast_slist('all')
      broadcast_slist('affected')
      broadcast_slist('learned')      
    else
      broadcast_slist(slisttype)   
    end

    SaveState ()
    return
  end -- if

  local sn, name, target, duration, percent, recovery, skilltype = parse_spell_line (line)

  if not sn then return end
  
  if spells['all'][sn] then
    spells[slisttype][sn] = spells['all'][sn]
    spells[slisttype][sn].duration = tonumber(duration)
    spells[slisttype][sn].percent = tonumber(percent)
  else
    spells[slisttype][sn] = {
        name = name:lower (),   -- name of spell
        target = target,        -- target code
        percent = tonumber(percent),      -- percent known for this character
        duration = tonumber(duration),    -- spell duration
        recovery = tonumber(recovery),    -- depends on which recovery
        ["type"] = tonumber(skilltype),  -- 1 = spell, 2 = skill
        sn = tonumber(sn),
        spellup = 0,
        } -- end spells table item
  end
      
  if (slisttype == 'affected' or slisttype == 'all') and duration > 0 then
    spells['affected'][sn] = spells['all'][sn]
    spells['affected'][sn].finish = GetInfo(304) + tonumber(duration)
  end

  if slisttype == 'spellup' then
    spells['all'][sn].spellup = 1
  end
  
  spells_count = spells_count + 1

end -- function spellheaders_redirect

-- parse recoveries line, break into pieces
function parse_recoveries_line (line)
  local sn, name, duration = string.match (line, "^(%d+)%,([A-Za-z0-9 ]+)%,(%d+)$")

  if not sn then
    ColourNote ("white", "red", "Invalid recoveries line: " .. line)
    return nil
  end -- not a valid spell name

  return tonumber (sn), trim (name:lower ()), tonumber (duration)
end -- parse_recoveries_line

function recoveries_redirect (name, line, wildcards, styles)

  -- start of recoveries list? remove old ones
  if name == "start_recoveries" then
    if trim(wildcards[1]) == "" then
      slisttype = "all" 
      recoveries['affected'] = {}
    else
      slisttype = trim(wildcards[1])
    end  
    recoveries[slisttype] = {}
    recoveries_count = 0
    start = GetInfo(304)    
    EnableTrigger ("multi_line_recoveries", true)  -- capture subsequent lines
    return
  end -- if

  if line == "{/recoveries}" then
    EnableTrigger ("multi_line_recoveries", false)  -- no more lines to go
    --ColourNote ("green", "", "Loaded information about " .. recoveries_count .. " recoveries.")
    if slisttype == 'all' then
      db:updaterecoveries(recoveries['all'])
      broadcast_recovery('affected')      
    end

    SaveState ()
    broadcast_recovery(slisttype)   
    return
  end -- if

  local sn, name, duration = parse_recoveries_line (line)

  if not sn then
    return
  end -- not a valid spell name
  
  recoveries[slisttype][sn] = { name = name, sn = tonumber(sn)  }
  if (slisttype == 'affected' or slisttype == 'all') and duration > 0 then
    recoveries['affected'][sn] = recoveries['all'][sn]
    recoveries['affected'][sn].finish = GetInfo(304) + tonumber(duration)
  end
  recoveries_count = recoveries_count + 1

end -- function recoveries_redirect

function get_spells(stype)
  local sliststr = serialize.save_simple( spells[stype] or {} )
  return sliststr
end
 
function get_recoveries(stype)
  local sliststr = serialize.save_simple( recoveries[stype] or {} )
  return sliststr
end
]]>
</script>

<script>
<![CDATA[

function OnPluginBroadcast (msg, id, name, text)
  phelper:OnPluginBroadcast(msg, id, name, text)
  
  if id == '3e7dedbe37e44942dd46d264' then
    if text:find("char") then
      res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char")
      local tt = assert (loadstring ('return ' .. gmcparg or ""))()
      if tt['vitals'] and tt['stats'] and tt['maxstats'] and tt['worth'] and tt['status'] and tt['base'] then
        state = tt['status'].state
        if tonumber(state) == 3 then
          if spells['all'] == nil then
            --print("state = 3 and spells['all'] nil")
            request_slist()
          end
        end
        if wasdisconnected then
          wasdisconnected = false
          request_slist()
        end        
      end
    end
  end
end

function OnPluginInstall ()
  --OnPluginEnable is automatically called by pluginhelper

  phelper:OnPluginInstall()
end -- OnPluginInstall

function OnPluginClose ()
  --OnPluginDisable is automatically called by pluginhelper

  phelper:OnPluginClose()
end -- OnPluginClose

function OnPluginEnable ()
  ldplugin ("aard_GMCP_handler", "3e7dedbe37e44942dd46d264")
  
  phelper:OnPluginEnable()
  if IsConnected() then
    request_slist()
  end
  
end -- OnPluginEnable

function OnPluginDisable ()
  if GetPluginInfo (GetPluginID (), 17) then
    TelnetOptionOff (TELOPT_SPELLUP)
    TelnetOptionOff (TELOPT_SKILLGAINS)
  end -- if enabled
  
  phelper:OnPluginDisable()
end -- OnPluginDisable

function OnPluginConnect ()
  TelnetOptionOn (TELOPT_SPELLUP)
  TelnetOptionOn (TELOPT_SKILLGAINS)

  
  phelper:OnPluginConnect()
end -- function OnPluginConnect

function OnPluginDisconnect ()
  wasdisconnected = true

  phelper:OnPluginDisconnect()
end -- function OnPluginConnect

function OnPluginSaveState ()

  phelper:OnPluginSaveState()
end -- function OnPluginSaveState

]]>
</script>

<script>
<![CDATA[

phelper:set_default('cmd', 'bsst')
phelper:set_default('plugin_colour', 'steelblue')

phelper:enable()

]]>
</script>
</muclient>
