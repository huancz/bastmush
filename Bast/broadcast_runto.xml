<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- $Id$ -->
<muclient>
<plugin
   name="xBroadcast_Runto"
   author="Bast"
   id="aaa7b6edb20fa44565c5a327"
   language="Lua"
   purpose="Sends updates when using runto"
   save_state="y"
   date_written="2009-08-02"
   requires="4.73"
   version="6.1"
   >

<description trim="y">
<![CDATA[
[FOR PLUGIN AUTHORS ONLY]

Detects when there is a change in state

Example:

  function OnPluginBroadcast (msg, id, name, text)
    if id == "aaa7b6edb20fa44565c5a327" then
      if msg == 1 then
        -- runto started
      elseif msg == 2 then
        -- done with runto
      end
    end -- playing status changed
  end

]]>
</description>

</plugin>

<!--  Triggers  -->
<triggers>
  <trigger
   enabled="y"
   regexp="y"
   script="runstart"
   match="^Running to: .*$"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   regexp="y"
   script="runend"
   match="^[Exits: .*]$"
   sequence="100"
   group="runtostuff"
  >
  </trigger>
  <trigger
   enabled="y"
   regexp="y"
   script="runend"
   match="^Invalid directions in command.$"
   sequence="100"
  >
  </trigger>
</triggers>

<!--  Script  -->

<script>
<![CDATA[
internalrevision = "$Rev$"

dofile (GetPluginInfo (GetPluginID (), 20) .. "luapath.lua")

require "var"
require "pluginhelper"
require 'ldplugin'

P, V, Cg, Ct, Cc, S, R, C, Cf, Cb = lpeg.P, lpeg.V, lpeg.Cg, lpeg.Ct, lpeg.Cc, lpeg.S, lpeg.R, lpeg.C, lpeg.Cf, lpeg.Cb

runpeg = (P("ru") * -P(1)) + (P("run") * -P(1))

running = false
seenrecall = false
seenrun = false
current_room = ''

function runstart(name, line, wildcards)
  running = true
  seenrecall = false
  phelper:broadcast(1)
end

function runend(name, line, wildcards)
  if running then
    phelper:enabletriggroup("runtostuff", false)
    running = false
    phelper:broadcast(2)
  end
end
]]>
</script>

<script>
<![CDATA[

function OnPluginBroadcast (msg, id, name, text)
  if id == '3e7dedbe37e44942dd46d264' then
    if text:find("char.status") then
      res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char.status")
      status = assert (loadstring ('return ' .. gmcparg or ""))()

      if running and tonumber(status.state) ~= 12 and seenrun then
        running = false
        phelper:broadcast(2)
      end

      if tonumber(status.state) == 12 then
        seenrun = true
      end
    elseif text:find("room.info") then
      res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","room")
      room = assert (loadstring ('return ' .. gmcparg or ""))()

      if seenrecall == true then
        seenrecall = false
        phelper:enabletriggroup("runtostuff", true)
      end
      if tostring(room.info.num) == tostring(32418) then
        seenrecall = true
      end
    end
  end
  phelper:OnPluginBroadcast(msg, id, name, text)
end

function OnPluginInstall ()
  --OnPluginEnable is automatically called by pluginhelper

  phelper:OnPluginInstall()
end -- OnPluginInstall

function OnPluginClose ()

  phelper:OnPluginClose()
end -- OnPluginClose

function OnPluginEnable ()
  ldplugin ("aard_GMCP_handler", "3e7dedbe37e44942dd46d264")

  phelper:OnPluginEnable()
end -- OnPluginEnable

function OnPluginDisable ()

  phelper:OnPluginDisable()
end -- OnPluginDisable

function OnPluginConnect ()

  phelper:OnPluginConnect()
end -- function OnPluginConnect

function OnPluginDisconnect ()

  phelper:OnPluginDisconnect()
end -- function OnPluginConnect

function OnPluginSaveState ()

  phelper:OnPluginSaveState()
end -- function OnPluginSaveState

function OnPluginSend (sText)
  local cmd = parse_cmdline(string.lower(sText))
  if not cmd[1] then
    cmd[1] = ""
  end

 if lpeg.match(runpeg, string.lower(cmd[1])) ~= nil and cmd[2] and #cmd[2] > 1 then
    running = true
    seenrun = false
    phelper:broadcast(1)
  end
end

]]>
</script>

<script>
<![CDATA[

phelper:set_default('cmd', 'brunto')
phelper:set_default('plugin_colour', 'orange')

phelper:enable()

]]>
</script>
</muclient>
