<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, May 01, 2009, 9:25 PM -->
<!-- MuClient version 4.40 -->
<!-- $Id$ -->
<!-- Plugin "StatsSave" generated by Plugin Wizard -->

<muclient>
<plugin
   name="StatDB"
   author="Bast"
   id="a749d26f1cb3e00282727e55"
   language="Lua"
   purpose="Save char info to a sqlite3 db"
   save_state="y"
   date_written="2009-05-01 21:24:06"
   requires="4.73"
   version="6.1"
   >

</plugin>

<timers>
  <timer
      script="dbbackup"
      enabled="y"
      hour="12"
      name="backuptimernoon"
      at_time="y"
      >
  </timer>
  <timer
      script="dbbackup"
      enabled="y"
      hour="0"
      name="backuptimermid"
      at_time="y"
      >
  </timer>
</timers>

<!--  Get our standard constants -->

<include name="constants.lua"/>

<script>
<![CDATA[
internalrevision = "$Rev$"

dofile (GetPluginInfo (GetPluginID (), 20) .. "luapath.lua")

require "var"
require "serialize"
require "commas"
require "pluginhelper"
require "verify"
require "chardb"
require "tprint"
require "aardutils"
require "ldplugin"

db = Statdb:new{}
char = {}

sentnoexp = false
sentwhois = false

function savelevel(level)
  local pvar = GetPluginVariable(  "aaa0ab9ed92f8fc614664bd1" , "levelinfo")

  --get the mob info
  loadstring( pvar )()
  levelgains = levelinfo
  if level then
    levelgains.newlevel = level
  end
  db:savelevel(levelgains)
end

function savequest()
  local quest_total = -1
  local quest_avg = 0
  local pvar = GetPluginVariable(  "aaa8a9eda20fa11787c6b438" , "quest_info")

  --get the quest info
  loadstring( pvar )()
  quest_stuff = quest_info
  db:savequest(quest_stuff)
end

function savecp()
  local pvar = GetPluginVariable(  "aaa66f81c50828bbbfda7100" , "cp_info")

  --get the cp info
  loadstring( pvar )()
  cp_stuff = cp_info
   cpgains = tostring(cp_stuff.qp)
   db:savecp(cp_stuff)
end

function savewhois()
  sentwhois = false
  local pvar = GetPluginVariable(  "aaaf9a8dc92f8fc614663ac0" , "whoisinfo")

  --get the whois stuff
  loadstring( pvar )()
  db:savewhois(  whoisinfo  )
  if db:countlevels() == 0 then
    levelinfo = {}
    levelinfo.type = "level"
    levelinfo.newlevel = tonumber(db:getstat('totallevels'))
    levelinfo.str = 0
    levelinfo.int = 0
    levelinfo.wis = 0
    levelinfo.dex = 0
    levelinfo.con = 0
    levelinfo.luc = 0
    levelinfo.time = GetInfo(304)
    levelinfo.hp = 0
    levelinfo.mp = 0
    levelinfo.mv = 0
    levelinfo.pracs = 0
    levelinfo.trains = 0
    levelinfo.bonustrains = 0
    db:savelevel(levelinfo, true)
  end
end

function savemobkill()
  local pvar = GetPluginVariable(  "aaa61c4570508448e19c7c14", "kill_info")

  -- get the kill
  loadstring( pvar )()
  db:savemobkill( kill_info )
end

function savegq()
  local pvar = GetPluginVariable(  "aaa77f81c5408278ccda7100", "gq_info")

  -- get the gqquest
  loadstring( pvar )()
  db:savegq( gq_info )
end

function createmilestone()
  Execute("whois")
  DoAfterSpecial(5, "aftermilestone()", 12)
end

function aftermilestone()
  level = db:getstat('totallevels')
  tlist = convertlevel(level)
  milestone = string.format("t%sr%sl%s", tlist.tier, tlist.remort, tlist.level)
  db:addmilestone(milestone)
end

function AddMilestone(cmddict)
  if cmddict[1] then
    if db:addmilestone(cmddict[1]) > 0 then
      phelper:plugin_header("")
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "added milestone " .. cmddict[1])
      ColourNote( "", "", "")
    end
  end
end

fieldstocomp = {
 'totallevels',
 'qpearned',
 'questscomplete',
 'questsfailed',
 'campaignsdone',
 'campaignsfld',
 'gquestswon',
 'duelswon',
 'duelslost',
 'timeskilled',
 'monsterskilled',
 'combatmazewins',
 'combatmazedeaths',
 'powerupsall',
 'totaltrivia',
}

function formatheader(name1, name2)
  ColourNote(RGBColourToName(var.plugin_colour), "black", string.format("%-20s" , "Item"),
             RGBColourToName(var.plugin_colour), "black", string.format("%-10s" , name1),
             RGBColourToName(var.plugin_colour), "black", string.format("%-10s", name2),
             RGBColourToName(var.plugin_colour), "black", string.format("%-10s", "Difference"))
 ColourNote(RGBColourToName(var.plugin_colour), "black",   "____________________________________________________")
end

function formatitem(itemname, value1, value2, value3)
  ColourTell(RGBColourToName(var.plugin_colour), "black", string.format("%-20s" , itemname),
             RGBColourToName(var.plugin_colour), "black", string.format("%-10s" , tostring(value1)),
             RGBColourToName(var.plugin_colour), "black", string.format("%-10s", tostring(value2)))

  if value3 then
    ColourNote(RGBColourToName(var.plugin_colour), "black", string.format("%-10s", tostring(value3)))
  else
    ColourNote(RGBColourToName(var.plugin_colour), "black", string.format("%-10d", math.abs(value1 - value2)))
  end
end

function formatCompMile(milestone1, milestone2)
  phelper:plugin_header("Comparing " .. milestone1.milestone .. " to " .. milestone2.milestone)
  formatheader(milestone1.milestone, milestone2.milestone)
  local datemile1 = os.date("%x", milestone1.time)
  local timemile1 = os.date("%X", milestone1.time)
  local timesec1 = milestone1.time
  if milestone1.time < 1 then
    datemile1 = 'Now'
    timemile1 = ''
    timesec1 = GetInfo(304)
  end
  local datemile2 = os.date("%x", milestone2.time)
  local timemile2 = os.date("%X", milestone2.time)
  local timesec2 = milestone2.time
  if milestone2.time < 1 then
    datemile2 = 'Now'
    timemile2 = ''
    timesec2 = GetInfo(304)
  end
  local datediff = timesec1 - timesec2
  if timesec2 > timesec1 then
    datediff = timesec2 - timesec1
  end
  local timed = format_time(datediff)
  formatitem('Date', datemile1, datemile2, timed)
  formatitem('Time', timemile1, timemile2, '')
  for h,item in pairs(fieldstocomp) do
    formatitem(item, milestone1[item] or 0, milestone2[item] or 0)
  end
  ColourNote( "", "", "")
end

function CompareMilestones(cmddict)
  local milestone1 = {}
  local milestone2 = {}
  if #cmddict == 0 then
    sql1 = "SELECT * FROM stats WHERE milestone = 'current'"
    sql2 = "SELECT * FROM stats WHERE milestone = 'start'"
  elseif #cmddict == 1 then
    sql1 = "SELECT * FROM stats WHERE milestone = 'current'"
    sql2 = "SELECT * FROM stats WHERE milestone = '" .. cmddict[1] .. "'"
  elseif #cmddict >= 2 then
    sql1 = "SELECT * FROM stats WHERE milestone = '" .. cmddict[1] .. "'"
    sql2 = "SELECT * FROM stats WHERE milestone = '" .. cmddict[2] .. "'"
  end
  if db:open() then
    for a in db.db:nrows(sql1) do
      milestone1 = a
    end
    for a in db.db:nrows(sql2) do
      milestone2 = a
    end
    db:close()
  end
  if not next(milestone1) or not next(milestone2) then
    phelper:plugin_header("")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "one of the milestones does not exist")
    ColourNote( "", "", "")
    return
  end
  formatCompMile(milestone1, milestone2)
end

function ListMilestones(cmddict)
  if cmddict[1] then
    findstr, n = string.gsub(cmddict[1], "*", "%%")
    findstr, n = string.gsub(findstr, "?", "_")
    sql = "SELECT milestone FROM stats WHERE milestone like '" .. findstr .. "'"
  else
    sql = "SELECT milestone FROM stats"
  end
  if db:open() then
    if db:checkfortable('stats') then
      max = nil
      min = nil
      sql2 = "SELECT MIN(totallevels) as MIN, MAX(totallevels) as MAX FROM stats WHERE stats.totallevels == stats.milestone"
      for a in db.db:nrows(sql2) do
        max = a['MAX']
        min = a['MIN']
      end
      phelper:plugin_header("Milestones")
      if max then
        ColourNote(RGBColourToName(phelper.plugin_colour), "black", 'levels between ' .. min .. ' and ' .. max)
      elseif min ~= nil then
        ColourNote(RGBColourToName(phelper.plugin_colour), "black", 'level ' .. tostring(min))
      end
      for b in db.db:nrows(sql) do
          test = tonumber(b['milestone'])
          if test ~= nil then
            if test > tonumber(max) or test < tonumber(min) then
              ColourNote(RGBColourToName(phelper.plugin_colour), "black", b['milestone'])
            end
          else
            ColourNote(RGBColourToName(phelper.plugin_colour), "black", b['milestone'])
          end
      end
      ColourNote( "", "", "")
    end
    db:close()
  end
end

function cmdBackup(cmddict)
  if #cmddict == 0 then
    ColourNote(RGBColourToName(var.plugin_colour), "black", "Please specify an extension")
    return true
  end
  db:backupdb(cmddict[1])
end

function cmdCampaignxp(cmddict)
  phelper:plugin_header("Campaign XP")
  if #cmddict == 0 then
    ColourNote(RGBColourToName(var.plugin_colour), "black", "Please specify a xp amount")
    return true
  end
  if cmddict[1] == 'off' then
    phelper:set('dontlevelnocampaign', false)
    ColourNote(RGBColourToName(var.plugin_colour), "black", 'noexp will not be used when no campaign for a level')
    return
  end
  local tnl = verify_number(cmddict[1])
  if tnl then
    if tnl < tonumber(char.base.perlevel) then
      phelper:set('campaignxp', tnl)
      phelper:set('dontlevelnocampaign', true)
      ColourNote(RGBColourToName(var.plugin_colour), "black", "If you haven't taken a campaign for this level then at < " .. tostring(tnl) .. 'xp, noexp will be set')
    else
      ColourNote(RGBColourToName(var.plugin_colour), "black", tostring(tnl) .. ' is higher than your xp per level')
      return
    end
  end
end

function checkcampaign(level)
  local res, clevel = CallPlugin("aaa66f81c50828bbbfda7100", "isoncp")
  clevel = tonumber(clevel)
  if tonumber(char.status.level) == 200 or tonumber(char.status.level) == 201 then
    return
  end
  if clevel == -1 or clevel ~= level then
    db:checkcptable()

    local numlevels = 0
    local totallevels = db:getstat('totallevels')
    if db:open() then
      for a in db.db:rows(string.format("SELECT COUNT(*) FROM campaigns where level = %d;", totallevels)) do
        numlevels = tonumber(a[1])
      end
      db:close()
    end

    if numlevels ~= 1 then
      if verify_bool(GetPluginVariable("aaa65ac8122d795ad5348dcd", "noexp")) == false and sentnoexp == false then
        sentnoexp = true
        Send("noexp")
      end
    end
  end
end

function dbbackup(name)
  local day = os.date("%a", GetInfo(304))
  if name == "backuptimermid" then
    db:backupdb(day .. '.midnight')
  elseif name == "backuptimernoon" then
    db:backupdb(day .. '.noon')
  else
    db:backupdb(day)
  end
end

function warning()
  ColourNote('red', 'black', '-------------------------------------------------------------------------------')
  ColourNote('red', 'black', '------------------------------- READ THIS -------------------------------------')
  ColourNote('red', 'black', 'If you want StatDB to keep working correctly then please logout and then login!')
  ColourNote('red', 'black', "Don't bother me if you start having StatDB issues and did not follow these")
  ColourNote('red', 'black', 'directions.  There is a bug with gmcp that the number of remorts is not')
  ColourNote('red', 'black', 'updated until you logout and login.  This will obviously mess with the levels')
  ColourNote('red', 'black', 'that cps/gqs/levels/quests are saved at.')
  ColourNote('red', 'black', '-------------------------------------------------------------------------------')
end
]]>
</script>

<script>
<![CDATA[

function OnPluginBroadcast (msg, id, name, text)
  if id == "aaa8a9eda20fa11787c6b438" and (msg == 6 or msg == 8) then
    savequest()
  elseif id == "aaa0ab9ed92f8fc614664bd1" and msg == 1 then
    savelevel()
  elseif id == "aaa0ab9ed92f8fc614664bd1" and (msg == 3 or msg == 4) then
    createmilestone()
  elseif id == "aaa0ab9ed92f8fc614664bd1" and msg == 8 then
    createmilestone()
    DoAfterSpecial(10, "savelevel()", 12)
  elseif id == "aaa0ab9ed92f8fc614664bd1" and msg == 6 then
    createmilestone('remort')
    DoAfterSpecial(10, "savelevel()", 12)
    DoAfterSpecial(10, "warning()", 12)
  elseif id == "aaaf9a8dc92f8fc614663ac0" and msg == 1 then
    sentwhois = false
    savewhois()
  elseif id == "aaa66f81c50828bbbfda7100" and (msg == 3 or msg == 4) then
    savecp()
  elseif id == "aaa61c4570508448e19c7c14" and msg == 1 then
    savemobkill()
  elseif id == "aaa77f81c5408278ccda7100" and msg == 4 then
    savegq()
  elseif id == '3e7dedbe37e44942dd46d264' then
    if text:find("char") then
      res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char")
      char = assert (loadstring ('return ' .. gmcparg or ""))()

      if char.status and char.status.state and tonumber(char.status.state) == 3 and db:getstat('totallevels') == nil and sentwhois == false then
        sentwhois = true
        Execute('whois')
      end

      if char.status and tonumber(char.status.tnl) < phelper.campaignxp then
        if phelper.dontlevelnocampaign and
           not verify_bool(GetPluginVariable('aaa65ac8122d795ad5348dcd', 'noexp')) and
           not sentnoexp
           and not (tonumber(char.status.state) == 8) then
          checkcampaign(tonumber(char.status.level))
        end
      end
    end
  elseif id == "aaa65ac8122d795ad5348dcd" then
    sentnoexp = false
  elseif id == "aaa66f81c50828bbbfda7100" and
         msg == 5 and
         phelper.dontlevelnocampaign and
         verify_bool(GetPluginVariable('aaa65ac8122d795ad5348dcd', 'noexp')) and
         not sentnoexp then

    sentnoexp = true
    Send('noexp')
  end

  phelper:OnPluginBroadcast(msg, id, name, text)
end

function OnPluginInstall ()
  --OnPluginEnable is automatically called by pluginhelper

  phelper:OnPluginInstall()
end -- OnPluginInstall

function OnPluginClose ()

  phelper:OnPluginClose()
end -- OnPluginClose

function OnPluginEnable ()
  ldplugin('broadcast_quest')
  ldplugin('broadcast_level')
  ldplugin('broadcast_whois')
  ldplugin('broadcast_cp')
  ldplugin('broadcast_kills')
  ldplugin('broadcast_gq')
  ldplugin('broadcast_noexp')

  phelper:OnPluginEnable()

  if IsConnected() then
    res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char")
    char = assert (loadstring ('return ' .. gmcparg or ""))()
  end
  dbbackup()
end -- OnPluginEnable

function OnPluginDisable ()

  phelper:OnPluginDisable()
end -- OnPluginDisable

function OnPluginConnect ()

  phelper:OnPluginConnect()
end -- function OnPluginConnect

function OnPluginDisconnect ()

  phelper:OnPluginDisconnect()
end -- function OnPluginConnect

function OnPluginSaveState ()

  phelper:OnPluginSaveState()
end -- function OnPluginSaveState

]]>
</script>

<script>
<![CDATA[

phelper:add_cmd('addmilestone', {func=AddMilestone, help="add a milestone"})
phelper:add_cmd('comparemilstone', {func=CompareMilestones, help="compare two milestones"})
phelper:add_cmd('listmilestones', {func=ListMilestones, help="list all milestones"})
phelper:add_cmd('backup', {func=cmdBackup, help="backup the database, the only argument is the extension"})
phelper:add_cmd('campaignxp', {func=cmdCampaignxp, help="set noexp if a campaign hasn't been taken and tnl is less than the argument to this function, use 'off' (no quotes) disable"})

phelper:set_default('cmd', 'statdb')
phelper:set_default('plugin_colour', 'orange')

phelper:add_setting('dontlevelnocampaign', {help="set this to true to automatically set noexp at <campaignxp tnl if you haven't done a campaign this level", type="bool", default=false})
phelper:add_setting('campaignxp', {help="tnl to check to set noexp if you haven't done a campaign this level", type="number", default=500, low=50})

phelper:enable()

]]>
</script>
</muclient>

