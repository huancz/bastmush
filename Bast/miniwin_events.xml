<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- $Id: miniwin_cp.xml 1082 2011-01-29 00:31:37Z endavis $ -->
<muclient>
<plugin
   name="miniwin_events"
   author="Bast"
   id="eee4b4fa021c1bee534ef093"
   language="Lua"
   purpose="Shows quests/CPs/GQs in a tabbed miniwindow"
   date_written="2008-07-22"
   requires="4.52"
   version="6.0"
   save_state="y"
   >
<description trim="y">
<![CDATA[

]]>
</description>

</plugin>

<triggers>
  <trigger
   enabled="y"
   match="Commander Barcett tells you 'Type 'campaign info' to see what you must kill.'"
   sequence="100"
   send_to="10"
   script="set_show"
  >
  </trigger>
</triggers>

<!--  Script  -->
<script>
<![CDATA[
internalrevision = "$Rev: 963 $"

dofile (GetPluginInfo (GetPluginID (), 20) .. "luapath.lua")

require "commas"
require 'var'
require "commas"
require 'miniwin'
require 'tprint'
require 'pluginhelper'
require 'ldplugin'
require 'verify'
require 'copytable'
require 'aardutils'

cpmobs = {}
cptimer = {}
level = nil
curlevel = nil
showwin = false

function set_show()
  showwin = true
end

quest_text = {}
quest_stuff = {mob=nil, room=nil, area=nil}
quest_timer = {}

gqmobs = {}

eventwin = Miniwin:new{name="Events"}
eventwin:set_default("maxtabs", 5)
eventwin:add_setting("quest_avail_colour", {help="the text colour for when a quest is available", type="colour", default=verify_colour("black"), sortlev=1})
eventwin:add_setting("quest_avail_bg_colour", {help="the background colour for when a quest available", type="colour", default=verify_colour("red"), sortlev=1})
eventwin:add_setting("cp_mobdead_colour", {help="the colour for when a mob is dead", type="colour", default=verify_colour("red"), sortlev=1})
eventwin:add_setting("cp_notlevel_colour", {help="the colour for when this cp is no longer from this level", type="colour", default=verify_colour("cyan"), sortlev=1})
eventwin:add_setting("cp_time_colour", {help="the colour for the time", type="colour", default=verify_colour(0xD670DA), sortlev=1})


function build_quest(showflag)
  if (not next(quest_timer)) or (not next(quest_stuff)) then
    return
  end

  quest_text = {}
  local mobstring = string.format("%-7s: %s", "Mob", quest_stuff.mobname)
  table.insert(quest_text, mobstring)
  local roomstring = string.format("%-7s: %s", "Room", quest_stuff.mobroom)
  table.insert(quest_text, roomstring)
  local areastring = string.format("%-7s: %s", "Area", quest_stuff.mobarea)
  table.insert(quest_text, areastring)

  local style = {}
  style.text = string.format ("Time to go: %s", quest_timer.text)
  style.len = #style.text
  --style.textcolour = 'time_colour'
  style.style = 0
  table.insert (quest_text, {style})
  show_quest (showflag)
  --style = {}
  --style.text = " Quest: On "
  --style.textcolour = questwin.time_colour
  --style.backcolour = questwin.bg_colour
  --questwin.tabcolour = questwin:get_colour(questwin.bg_colour)
  --questwin:tabbroadcast(true, {style})
  --questwin:show(true)
end

function show_quest (showflag)
  -- do nothing if no quest
  if #quest_text == 0 then
    return
  end -- if

  eventwin:enable()
  eventwin:addtab('Quest', quest_text, nil, false, false, 1)
  if showflag then
    eventwin:changetotab('Quest')
  end
--  if not eventwin:hastab('CP') then
--    eventwin:addtab('CP', quest_text)
--  end
--  if not eventwin:hastab('GQ') then
--    eventwin:addtab('GQ', quest_text)
--  else
--    eventwin:removetab('GQ')  
--  end  
  --questwin:show(winbetweenquest)
end -- show_quest_text


function show_cp_text ()

  local texttable = {}
  local header = {}
  local style = {}

  -- do nothing if no campaign
  if #cpmobs == 0 or not next(cptimer) then
    return
  end -- if
  -- heading

  style = {}
  style.text = string.format("Campaign mobs left: %s", #cpmobs)
  table.insert (header, {style})

  -- list of mobs
  for i, v in ipairs (cpmobs) do
    style = {}
    style.text = string.format("%-30s %s", v.name, " (" .. v.room .. ")")
    if verify_bool(v.mobdead) then
      style.textcolour = "cp_mobdead_colour"
    end
    table.insert (texttable, {style})
  end -- for

  tstyle = {}
  style = {}
  style.text = string.format ("Time to go: %sd %sh %sm ", cptimer.days, cptimer.hours, cptimer.mins)
  style.textcolour = "footer_text_colour"
  table.insert(tstyle, style)
  if level and level.level > 0 then
    style = {}
    style.text = "- Level: " .. tostring(level.level)
    if tonumber(level.level) == tonumber(curlevel) then
      style.textcolour = eventwin.text_colour
    else
      style.textcolour = "cp_notlevel_colour"
    end
    table.insert(tstyle, style)
    tstyle.topborder = true
    tstyle.backcolour = "footer_bg_colour"
  end
  table.insert (texttable, tstyle)

  eventwin:enable()
  eventwin:addtab('CP', texttable, header)
  eventwin:settabnametext('CP', ": " .. #cpmobs)    
  if showwin then
    eventwin:show(true)
    showwin = false
    eventwin:changetotab('CP')
  end
  --style = {}
  --style.text = " CP: " .. #cpmobs
  --cpwin:tabbroadcast(true, {style})
      
end -- show_cp_text

gqmobs = {}
mobcount = 0

function build_gq ()

  local texttable = {}
  local style = {}
  local header = {}
  -- do nothing if no gquest
  if #gqmobs == 0 then
    return
  end -- if


  -- list of mobs
  local mobcount = 0
  for i, v in ipairs (gqmobs) do
    mobcount = mobcount + v.num
    style = {}
    style.text = string.format("%3s: %-30s %s", v.num, v.name, " (" .. v.room .. ")")
    style.len = #style.text
    style.style = 0
    table.insert (texttable, {style})
  end -- for

  -- heading
  style = {}
  style.text = string.format("GQuest mobs left: %s", mobcount)
  style.len = #style.text
  style.style = 0
  table.insert (header, {style})

  gq_text = texttable
  --gqwin.header_height = 1
  eventwin:settabnametext('GQ', ": " .. mobcount)   
  show_gq(texttable, header)

  --style = {}
  --style.text = " GQ: " .. mobcount
  --gqwin:tabbroadcast(true, {style})
  eventwin:show(true)
    
end -- build_gq

function show_gq (text, header)
  -- do nothing if no gq
  if #text == 0 then
    return
  end -- if

  eventwin:enable()
  eventwin:addtab('GQ', text, header, true)
  eventwin:changetotab('GQ')  
  --gqwin:changetotab('default')
  --gqwin:show(true)
end -- show_quest_text
]]>
</script>

<script>
<![CDATA[

function OnPluginBroadcast (msg, id, name, text)
  if id == "aaa8a9eda20fa11787c6b438" then
    if msg == 1 then
      -- quest available
      quest_stuff = {}
      quest_timer = {}
      quest_text = {}
      local style = {}
      style.style = 0
      style.text = "You can quest again!"
      style.backcolour = 'quest_avail_bg_colour'
      style.textcolour = 'quest_avail_colour'
      table.insert(quest_text, {style})
      quest_text.backcolour = "quest_avail_bg_colour"
      eventwin:settabnametext('Quest', {{text=" Now ",backcolour='quest_avail_bg_colour', textcolour='quest_avail_colour'}})
      --eventwin:settabnametext('Quest', " Now ")
      show_quest()
      style = {}
      style.text = ' Quest: Now '
      style.textcolour = eventwin.quest_avail_colour
      style.backcolour = eventwin.quest_avail_bg_colour
      --questwin.tabcolour = questwin:get_colour(questwin.avail_bg_colour)
      eventwin:tabbroadcast(true, {style})
    elseif msg == 2 then
      -- quest mob info
      quest_timer = {}
      local pvar = GetPluginVariable(  "aaa8a9eda20fa11787c6b438", "quest_info" )

      -- get the timer
      loadstring( pvar )()
      quest_stuff = quest_info
    elseif msg == 3 then
      -- quest time left
      local pvar = GetPluginVariable(  "aaa8a9eda20fa11787c6b438", "timer" )

      -- get the timer
      loadstring( pvar )()
      quest_timer = timer
      build_quest(true)
    elseif msg == 4 then
      -- quest mob dead
      quest_text = {"  Quest Complete - Hand it in  "}
      eventwin:settabnametext('Quest', ": Comp")      
      show_quest()
      style = {}
      style.text = ' Event Q:C '
      --style.textcolour = questwin.text_colour
      --style.backcolour = questwin.bg_colour
      --questwin.tabcolour = questwin.bg_colour
      eventwin:tabbroadcast(true, {style})
    elseif msg == 5 then
      return
    elseif msg == 6 then
      return
    elseif msg == 7 then
      -- time until next quest
      local pvar = GetPluginVariable(  "aaa8a9eda20fa11787c6b438", "timer" )

      -- get the timer
      loadstring( pvar )()
      quest_text = {}
      local style = {}
      style.style = 0
      style.text=  string.format ("Next quest: %s", timer.text)
      style.len = #style.text
      style.hjust = 'center'
      --style.textcolour = 'time_colour'
      --winbetweenquest = WindowInfo(questwin.id, 5)
      table.insert(quest_text, {style})
      eventwin:settabnametext('Quest', ": " .. timer.text)       
      --quest_text.backcolour = nil      
      show_quest()
      style = {}
      style.text = ' Events Q:' .. timer.text .. ' '
      --style.textcolour = questwin.time_colour
      --style.backcolour = questwin.bg_colour
      tstyle = {style}
      --questwin.tabcolour = questwin.bg_colour
      eventwin:tabbroadcast(true, tstyle)
    elseif msg == 8 then
      --questwin:show(winbetweenquest)
    end

 elseif id == "aaa66f81c50828bbbfda7100" then
    if msg == 1 then
      local pvar = GetPluginVariable(  "aaa66f81c50828bbbfda7100", "mobs" )

      -- get the mobs
      loadstring( pvar )()
      cpmobs = mobs

      local pvar2 = GetPluginVariable(  "aaa66f81c50828bbbfda7100", "cp_info")
      loadstring(pvar2)()
      if cp_info.level then
        level = convertlevel(cp_info.level)
      else
        level = convertlevel(-1)
      end

      show_cp_text()
    elseif msg == 2 then
      local pvar = GetPluginVariable(  "aaa66f81c50828bbbfda7100", "timer" )

      -- get the timer
      loadstring( pvar )()
      cptimer = timer
      show_cp_text()
    elseif msg == 3 or msg == 4 then
      cptimer = {}
      mobs = {}
      eventwin:removetab('CP')
    end

  elseif id == '3e7dedbe37e44942dd46d264' then
    if text:find("char") then
      res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval", "char")
      tt = assert (loadstring ('return ' .. gmcparg or ""))()

      if tt['status'] then
        tcurlevel = tt.status.level
        if curlevel ~= tcurlevel then
          curlevel = tcurlevel
          show_cp_text()
        end
      end

    end
  elseif id == "aaa77f81c5408278ccda7100" then
    if msg == 1 then
      -- gquest available
      --local style = {}
      --style.text = " GQ "
      --style.textcolour = "red"
      --gqwin:tabbroadcast(true, {style})
      show_gq({"GQuest Available"})
    elseif msg == 2 then
      -- gquest joined
      show_gq({"GQuest Joined - Waiting"})
    elseif msg == 3 then
      local pvar = GetPluginVariable(  "aaa77f81c5408278ccda7100", "mobs" )
      -- get the mobs
      loadstring( pvar )()
      gqmobs = mobs
      build_gq()
    elseif msg == 4 or msg == 5 then
      -- reward
      eventwin:removetab('GQ')
    end    
  end

  phelper:OnPluginBroadcast(msg, id, name, text)
end

function OnPluginInstall ()
  --OnPluginEnable is automatically called by pluginhelper

  phelper:OnPluginInstall()
end -- OnPluginInstall

function OnPluginClose()

  phelper:OnPluginClose()
end -- OnPluginClose

function OnPluginEnable ()
  ldplugin("broadcast_cp")
  ldplugin("broadcast_gq")
  ldplugin("broadcast_quest")  
  ldplugin ("aard_GMCP_handler", "3e7dedbe37e44942dd46d264")

  phelper:OnPluginEnable()

  if not eventwin:hastab('Quest') then
    eventwin:addtab('Quest', {{text='Unknown'}})
  end
end -- OnPluginEnable

function OnPluginDisable ()

  phelper:OnPluginDisable()
end -- OnPluginDisable

function OnPluginConnect ()

  phelper:OnPluginConnect()
end -- OnPluginConnect

function OnPluginDisconnect ()

  phelper:OnPluginDisconnect()
end -- function OnPluginConnect

function OnPluginSaveState ()

  phelper:OnPluginSaveState()
end -- function OnPluginSaveState

]]>
</script>

<script>
<![CDATA[

phelper:set_default('cmd', 'mev')
phelper:set_default('plugin_colour', 'steelblue')

phelper:add_pobject('win', eventwin)

phelper:enable()

]]>

</script>

</muclient>
